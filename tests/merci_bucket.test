<?php

/**
 * @file
 * Simpletest case for node_example module.
 *
 * Verify example module functionality.
 */

require_once drupal_get_path('module', 'merci') . '/tests/merci_testcase.php';
class MerciBucketTestCase extends MerciTestCase {
  public $bucket;
  public $resource;
  public $resource2;
  public $merci_user;
  public $merci_role;

  public static function getInfo() {
    return array(
      'name' => 'MERCI bucket testing',
      'description' => 'Test MERCI Buckets.',
      'group' => 'Merci',
    );
  }
  function setUp() {
    // Enable the module.
    parent::setUp();
    $this->bucket = $this->merciCreateItem('bucket');
    $this->resource = $this->merciCreateItem('resource');
    $this->resource2 = $this->merciCreateItem('resource');

    $edit = array(
      MERCI_BUCKET_ITEM_FIELD . '[und][0][target_id]' => $this->resource->nid,
    );
    $this->merciUpdateNode($this->bucket->nid,$edit);
    $edit = array(
      MERCI_BUCKET_ITEM_FIELD . '[und][1][target_id]' => $this->resource2->nid,
    );
    $this->merciUpdateNode($this->bucket->nid,$edit);

    $this->assertText(t("@title has been updated", array('@title' => $this->bucket->title)));

    $this->merci_role = $this->drupalCreateRole(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
     // 'edit own resource content',
      //'delete own resource content',
      'create reservations',
      //'access devel information'
    ));
    // Create merci user. 
    $this->merci_user = $this->drupalCreateUser(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
      //'edit own resource content',
      //'delete own resource content',
      'create reservations',
      //'access devel information',
      'create merci_reservation content',
      'edit own merci_reservation content',
      'delete own merci_reservation content',
    ));

    $edit = array('roles' => ($this->merci_user->roles + array($this->merci_role => $this->merci_role)));
    user_save($this->merci_user, $edit);

    $edit = array('roles' => ($this->admin_user->roles + array($this->merci_role => $this->merci_role)));
    user_save($this->admin_user, $edit);
  }

  function testMerciTooManyBuckets() {

    // Login the merci user.
    $this->drupalLogin($this->merci_user);

    // Create our first reservation
    $item = $this->bucket;

    // Create a reservation for tomorrow.
    $day = date('Y-m-d',time() + 3600 * 24);
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_reservation_date[und][0][value][date]' => $day,
      'field_merci_reservation_date[und][0][value][time]' => '09:15',
      'field_merci_reservation_date[und][0][value2][date]' => $day,
      'field_merci_reservation_date[und][0][value2][time]' => '10:15',
      'field_merci_reservation_items[und][0][target_id]' => $item->nid,
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);

    $edit = array(
      'field_merci_reservation_items[und][1][target_id]' => $item->nid,
    );
    $this->merciUpdateNode($first->nid,$edit);

    $edit = array(
      'field_merci_reservation_items[und][2][target_id]' => $item->nid,
    );
    $this->merciUpdateNode($first->nid,$edit);

    $this->assertText(t("You've selected too many @title", array('@title' => $item->type_name)));
  }

  function testMerciTooManyPlusConflictBuckets() {

    // Login the merci user.
    $this->drupalLogin($this->merci_user);

    // Create our first reservation
    $item = $this->bucket;

    // Create a reservation for tomorrow.
    $day = date('Y-m-d',time() + 3600 * 24);
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_reservation_date[und][0][value][date]' => $day,
      'field_merci_reservation_date[und][0][value][time]' => '09:15',
      'field_merci_reservation_date[und][0][value2][date]' => $day,
      'field_merci_reservation_date[und][0][value2][time]' => '10:15',
      'field_merci_reservation_items[und][0][target_id]' => $item->nid,
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);
    // Create a reservation for tomorrow.
    $day = date('Y-m-d',time() + 3600 * 24);
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_reservation_date[und][0][value][date]' => $day,
      'field_merci_reservation_date[und][0][value][time]' => '09:15',
      'field_merci_reservation_date[und][0][value2][date]' => $day,
      'field_merci_reservation_date[und][0][value2][time]' => '10:15',
      'field_merci_reservation_items[und][0][target_id]' => $item->nid,
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);

    $edit = array(
      'field_merci_reservation_items[und][1][target_id]' => $item->nid,
    );
    $this->merciUpdateNode($first->nid,$edit);

    $edit = array(
      'field_merci_reservation_items[und][2][target_id]' => $item->nid,
    );
    $this->merciUpdateNode($first->nid,$edit);
    $this->assertText(t("You've selected too many"));
    $this->assertText(t("conflict with one or more existing reservations"));
  }
}
