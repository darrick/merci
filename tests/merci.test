<?php
// $Id$

/**
 * @file
 * Simpletest case for node_example module.
 *
 * Verify example module functionality.
 */

/**
 * Functionality tests for node example module.
 */
class MerciTestCase extends DrupalWebTestCase {


  public static function getInfo() {
    return array(
      'name' => 'MERCI node type',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }

  function setUp() {
    // Enable the module.
    parent::setUp(
        'node',
        'devel',
        'content',
        'fieldgroup',
        'optionwidgets',
        'text',
        'number',
        'jquery_ui',
        'date_api',
        'date',
        'date_timezone',
        'date_popup',
        'text',
        'views',
        'merci'

        );

    // Create admin user. 
    $this->admin_user = $this->drupalCreateUser(array(
      'administer nodes', // Required to set revision checkbox
      'administer content types',
      'access administration pages',
      'administer site configuration',
      'view revisions',
      'revert revisions',
      'access devel information',
      'administer MERCI'
    ));
    // Login the admin user.
    $this->drupalLogin($this->admin_user);

    $settings = array (
      'merci_default_reservation_status' => '1',
      'merci_max_days_advance_reservation' => '0',
      'merci_saturday_is_weekend' => '1',
      'merci_sunday_is_weekend' => '1',
      'merci_hours_mon' => '09:00-17:00',
      'merci_hours_tue' => '09:00-17:00',
      'merci_hours_wed' => '09:00-17:00',
      'merci_hours_thu' => '09:00-17:00',
      'merci_hours_fri' => '09:00-17:00',
      'merci_hours_sat' => '09:00-17:00',
      'merci_hours_sun' => '09:00-17:00',
      'merci_hours_admin' => '07:00-22:00',
      'merci_closed_dates' => '12-25',
      'merci_membership_discount' => '',
    );

    $this->merciCreateConfig($settings);

    $settings = array (
      'date_default_timezone_name' => 'America/Los_Angeles',
      );
    $this->drupalPost('admin/settings/date-time' , $settings, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
  }


  function merciCreateContentType($settings,$merci_type,$merci_settings=NULL) {
    // Create resource content type
    // Disable the rating for this content type: 0 for Disabled, 1 for Enabled.
    $content_type = $this->drupalCreateContentType($settings);
    $type = $content_type->type;
    $settings = array(
        'merci_type_setting' => $merci_type,
        'merci_max_hours_per_reservation' => 5
    );
    if($merci_settings) {
      $settings = $settings + $merci_settings;
    }
    $this->drupalPost('admin/content/node-type/' . $type, $settings, t('Save content type'));
    $this->assertResponse(200);
    $this->assertRaw(' has been updated.', t('Settings modified successfully for content type.'));
    return $type;
  }

  function merciCreateNode($type,$settings,$pass=TRUE) {
    $this->drupalPost('node/add/' . $type, $settings, t('Save'));
    if($pass) {
      $this->assertText(t("@title has been created", array('@title' => $settings['title'])));
    }
    $node = node_load(array('title' => $settings['title']));
    //$this->verbose('Node created: ' . var_export($node, TRUE));
    return $node;
  }

  function merciUpdateNode($nid,$settings,$pass=TRUE) {
    $this->drupalPost("node/$nid/edit", $settings, t('Save'));
    if($pass) {
      $this->assertText(t("@title has been updated.", array('@title' => $settings['title'])));
    }
    $node = node_load($nid);
    return $node;
  }

  function merciCreateConfig($settings) {
    $this->drupalPost('admin/settings/merci' , $settings, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
  }

}

class MerciUserTestCase extends MerciTestCase {
  public $bucket1;
  public $bucket2;
  public $bucket3;
  public $resource;

  public static function getInfo() {
    return array(
      'name' => 'MERCI user level tesing',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }
  function setUp() {
    // Enable the module.
    parent::setUp();
    $settings = array (
        'type'  => 'bucket'
        );
    $type = $this->merciCreateContentType($settings,'bucket');
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket1 = $this->merciCreateNode($type,$edit);
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket2 = $this->merciCreateNode($type,$edit);
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket3 = $this->merciCreateNode($type,$edit);
    $settings = array (
        'type'  => 'resource'
        );
    $type = $this->merciCreateContentType($settings,'resource');
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->resource = $this->merciCreateNode($type,$edit);

    // Create merci user. 
    $this->merci_user = $this->drupalCreateUser(array(
      'view revisions',
      'revert revisions',
      'edit own bucket content',
      'delete own bucket content',
      'edit own resource content',
      'delete own resource content',
      'create reservations',
      'access devel information'
    ));
    // Login the merci user.
    $this->drupalLogin($this->merci_user);

  }

  function _testMerciStatus() {
    //TODO check merci_validate_status function. 
  }

  function _testMerciMaxHoursPerReservation() {
    // with/without override max hours over closed days permission.
    // with/without allow_weekends setting.
  }

  function _testMerciAllowOvernight() {
  }

  function testMerciHoursOfOperation() {

    $today = date('Y-m-d');

    $day = strtolower(date('D'));

    $fancy_day = date('l');

    // Test start time to early 
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '08:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Reservations cannot start at a time before 9:00."));

    // Test end time to late 
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '16:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '23:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Reservations cannot end at a time after 17:00."));

    $hours = variable_get('merci_hours_'.$day,'');
    variable_set('merci_hours_'.$day,'');

    // Test start day on closed day 
    // Test end day on closed day
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '10:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertRaw(t("Reservations cannot start on a %day.",array('%day' => $fancy_day)));
    $this->assertRaw(t("Reservations cannot end on a %day.",array('%day' => $fancy_day)));

    // Return or config back to default.
    variable_set('merci_hours_'.$day,$hours);

  }

  function testMerciClosedDays() {
    // Create merci user. 

    $closed = variable_get('merci_closed_dates','12-25');

    $today = '2010-'.$closed;

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Sorry, but we are closed on December 25th for a holiday or special event."));
  }

  function testMerciMaxDays() {

    $max_days = 2;
    variable_set("merci_max_days_advance_reservation", $max_days);

    $max_days++;

    $later = date('Y-m-d',time() + $max_days * 24 * 3600);
    $today = date('Y-m-d');

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $later,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $later,
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("You cannot make a Reservation more than 2 days in advance."));
    variable_set("merci_max_days_advance_reservation", 0);
  }

  function testMerciBucketAvailability() {

    // Test we can reserve our three bucket items all at the same time.
    // Test the fourth reservation at the same time will fail.

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);

    // Create our second reservation
    $node = $this->bucket2;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $second = $this->merciCreateNode('merci-reservation',$edit);

    // Create our third reservation
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'choice[0][item]' => $node->type
    );

    $third = $this->merciCreateNode('merci-reservation',$edit);

    // Try to create our fourth reservation.  This should FAIL
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:14',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:14',
      'choice[0][item]' => $node->type
    );

    $fail = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    //$this->assertText(t("The dates and times for @title conflict with one or more existing reservations", array('@title' => $node->type)));
    $this->assertText(t("conflict with one or more existing reservations"));

    // Try creating the reservation at a different time.
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-06',
      'field_merci_date[0][value][time]' => '09:14',
      'field_merci_date[0][value2][date]' => '2011-01-06',
      'field_merci_date[0][value2][time]' => '10:14',
      'choice[0][item]' => $node->type
    );

    $fourth = $this->merciCreateNode('merci-reservation',$edit);

    // Test updating current reservations.
    // Also set the times so they will share a bucket item.  Tetris

    // Update second reservation.
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:00',
    );

    $second = $this->merciUpdateNode($second->nid,$edit);

    // Update our third reservation
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '10:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
    );

    $third = $this->merciUpdateNode($third->nid,$edit);

    // Now that the above two reservations are sharing an item ....
    // Try to create our fourth reservation.  This should now PASS 
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:14',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:14',
      'choice[0][item]' => $node->type
    );

    $pass = $this->merciCreateNode('merci-reservation',$edit);
  }
}
class MerciAdminTestCase extends MerciTestCase {
  public static function getInfo() {
    return array(
      'name' => 'MERCI admin level testing',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }
  function setUp() {
    // Enable the module.
    parent::setUp();
  }
  function testMerciBucketContent() {
    // TODO test creating a bukcet content item and all the settings are correct.
    $settings = array (
        'type'  => 'bucket',
        );
    // Create resource content type
    // Disable the rating for this content type: 0 for Disabled, 1 for Enabled.
    $merci_settings = array(
        'merci_max_hours_per_reservation' => 5,
        'merci_allow_overnight' => TRUE,
        'merci_allow_weekends' => TRUE,
        'merci_spare_items' => 3 ,
        'merci_min_cancel_hours' => 3,
        'merci_autocheckout' => TRUE,
        'merci_autocheckin' => TRUE,
        'merci_selfcheckout' => TRUE,
        'merci_auto_assign_bucket_item' => TRUE,
        'merci_status' => MERCI_STATUS_ACTIVE,
    );
    $type = $this->merciCreateContentType($settings,'bucket',$merci_settings);

    $content_settings = merci_content_types($type);
    $settings = array();

    foreach($merci_settings as $key => $value) {
      if(substr($key,0,6) == 'merci_'){
        $settings[substr($key,6)] = $value;
      }
    }
    $this->_compareArrayForChanges($settings,$content_settings,"!key matches");
    //$this->verbose('Node created: ' . var_export($content_settings, TRUE));
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket1 = $this->merciCreateNode($type,$edit);
  }

  function _compareArrayForChanges($fields, $data, $message, $prefix = '') {
    foreach ($fields as $key => $value) {
      $newprefix = ($prefix == '') ? $key : $prefix .']['. $key;
      if (is_array($value)) {
        $compare_to = isset($data[$key]) ? $data[$key] : array();
        $this->_compareArrayForChanges($value, $compare_to, $message, $newprefix);
      }
      else {
        $this->assertEqual($value, $data[$key], t($message, array('!key' => $newprefix)));
      }
    }
  }
  /*
  function testMerciResourceContent() {
    // TODO test creating a resource content item and all the settings are correct.
  }

  function testMerciTypeSettings() {
    // TODO test creating a bucket and reource type and all the settings are correct (saved == retrieved).
  }
   */
}
