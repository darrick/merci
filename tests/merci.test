<?php
// $Id$

/**
 * @file
 * Simpletest case for node_example module.
 *
 * Verify example module functionality.
 */

/**
 * Functionality tests for node example module.
 */
class MerciTestCase extends DrupalWebTestCase {


  public static function getInfo() {
    return array(
      'name' => 'MERCI node type',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }

  public $admin_user;

  function setUp() {
    // Enable the module.
    parent::setUp(
        'node',
        'devel',
        'content',
        'fieldgroup',
        'optionwidgets',
        'text',
        'number',
        'jquery_ui',
        'date_api',
        'date',
        'date_timezone',
        'date_popup',
        'text',
        'views',
        'merci'
        //'merci_staff'

        );

    // Create admin user. 
    $this->admin_user = $this->drupalCreateUser(array(
      'administer nodes', // Required to set revision checkbox
      'administer content types',
      'access administration pages',
      'administer site configuration',
      'view revisions',
      'revert revisions',
      'access devel information',
      'administer MERCI',
      'manage reservations'
    ));
    // Login the admin user.
    $this->drupalLogin($this->admin_user);

    $settings = array (
      'merci_default_reservation_status' => '2',
      'merci_max_days_advance_reservation' => '0',
      'merci_saturday_is_weekend' => '1',
      'merci_sunday_is_weekend' => '1',
      'merci_hours_mon' => '09:00-17:00',
      'merci_hours_tue' => '09:00-17:00',
      'merci_hours_wed' => '09:00-17:00',
      'merci_hours_thu' => '09:00-17:00',
      'merci_hours_fri' => '09:00-17:00',
      'merci_hours_sat' => '09:00-17:00',
      'merci_hours_sun' => '09:00-17:00',
      'merci_hours_admin' => '07:00-22:00',
      'merci_closed_dates' => '12-25',
    );

    $this->merciCreateConfig($settings);

    $settings = array (
      'date_default_timezone_name' => 'America/Los_Angeles',
      );
    $this->drupalPost('admin/settings/date-time' , $settings, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    //db_query("UPDATE {content_node_field} SET locked = 0 WHERE field_name = 'field_merci_date' OR  field_name = 'field_merci_member_cost' OR field_name = 'field_merci_commercial_cost' OR field_name = 'field_merci_commercial_rental'");
    $this->drupalGet('admin/merci/unlock');
    node_types_rebuild();
    $settings = array ( 
      'input_format' => 'Y-m-d H:i',
    );
    $this->drupalPost('admin/content/node-type/merci-reservation/fields/field_merci_date', $settings, t('Save field settings'));
    $this->assertText(t("Saved field Reservation."));
  }


  function merciCreateContentType($settings,$merci_type,$merci_settings=NULL) {
    // Create resource content type
    // Disable the rating for this content type: 0 for Disabled, 1 for Enabled.
    $content_type = $this->drupalCreateContentType($settings);
    $type = $content_type->type;
    $settings = array(
        'merci_type_setting' => $merci_type,
        'merci_max_hours_per_reservation' => 5
    );
    if($merci_settings) {
      $settings = $settings + $merci_settings;
    }
    $this->drupalPost('admin/content/node-type/' . $type, $settings, t('Save content type'));
    $this->assertResponse(200);
    $this->assertRaw(' has been updated.', t('Settings modified successfully for content type.'));
    return $type;
  }

  function merciCreateNode($type,$settings,$pass=TRUE) {
    $this->drupalPost('node/add/' . $type, $settings, t('Save'));
    $node = node_load(array('title' => $settings['title']));
    //$this->verbose('Node created: ' . var_export($node, TRUE));
    return $node;
  }

  function merciUpdateNode($nid,$settings,$pass=TRUE) {
    $this->drupalPost("node/$nid/edit", $settings, t('Save'));
    $node = node_load($nid);
    return $node;
  }

  function merciCreateConfig($settings) {
    $this->drupalPost('admin/settings/merci' , $settings, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
  }

}

class MerciUserTestCase extends MerciTestCase {
  public $bucket1;
  public $bucket2;
  public $bucket3;
  public $resource;
  public $resource2;
  public $merci_user;
  public $merci_role;

  public static function getInfo() {
    return array(
      'name' => 'MERCI user level tesing',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }
  function setUp() {
    // Enable the module.
    parent::setUp();
    $settings = array (
        'type'  => 'bucket',
        );
    $merci_settings = array (
    //    'merci_auto_assign_bucket_item' => TRUE 
        );
    $type = $this->merciCreateContentType($settings,'bucket',$merci_settings);
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket1 = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket2 = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket3 = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));
    $settings = array (
        'type'  => 'resource'
        );
    $type = $this->merciCreateContentType($settings,'resource');
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->resource = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    $edit = array(
      'title' => $this->randomName()
    );
    $this->resource2 = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    $this->merci_role = $this->drupalCreateRole(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
      'edit own resource content',
      'delete own resource content',
      'create reservations',
      'access devel information'
    ));
    // Create merci user. 
    $this->merci_user = $this->drupalCreateUser(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
      'edit own resource content',
      'delete own resource content',
      'create reservations',
      'access devel information'
    ));
//    $this->verbose('User created: ' . var_export($this->merci_user->roles, TRUE));
//    $this->verbose('Role created: ' . var_export($this->merci_role, TRUE));
    $edit = array('roles' => ($this->merci_user->roles + array($this->merci_role => $this->merci_role)));
    user_save($this->merci_user, $edit);

    $edit = array('roles' => ($this->admin_user->roles + array($this->merci_role => $this->merci_role)));
    user_save($this->admin_user, $edit);
    // Login the merci user.
    $this->drupalLogin($this->merci_user);

  }

  function _testMerciStaffModule() {
    $this->drupalLogin($this->admin_user);

    // Create a contenty type only staff can reserve.
    $settings = array (
        'type'  => 'bucketstaff',
        );
    $merci_settings = array (
    //    'merci_auto_assign_bucket_item' => TRUE 
        );
    $type = $this->merciCreateContentType($settings,'bucket',$merci_settings);
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $bucketstaff = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Create merci staff user. 
    $staff_user = $this->drupalCreateUser(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
      'edit own bucketstaff content',
      'delete own bucketstaff content',
      'edit own resource content',
      'delete own resource content',
      'create reservations',
      'access devel information',
      'manage reservations',
      'administer nodes'
    ));
    $this->drupalLogin($staff_user);

    $today = date('Y-m-d');
    // Create our first reservation for staff.  Should pass.
    $node = $bucketstaff;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    $this->verbose('Node created: ' . print_r($node, TRUE));

    global $user;
      //$this->verbose(print_r($user, TRUE));
    if (user_access('manage reservations')) {
      
      //$this->verbose("hello");
    }

    // Update reservation with merci user as author.  Should Fail.
    $edit = array(
      'name' => $this->merci_user->name,
    );

    $title = $first->title;

    $second = $this->merciUpdateNode($first->nid,$edit);
    $name = node_get_types('name',$type);
    $this->assertText(t("You do not have permission to reserve @title.", array('@title' => $name)));

    // Update reservation with merci user as author with override on.  Should Pass.
    $edit = array(
      'name' => $this->merci_user->name,
      'override' => 1,
    );

    $title = $first->title;

    $second = $this->merciUpdateNode($first->nid,$edit);
    $name = node_get_types('name',$type);
    $this->assertText(t("@title has been updated", array('@title' => $title)));

    // Update reservation status with merci user as author with override off.  Should Pass as status should be validated by the admin user.
    $edit = array(
      'name' => $this->merci_user->name,
      'merci_reservation_status' => 5,
    );

    $title = $first->title;

    $second = $this->merciUpdateNode($first->nid,$edit);
    $name = node_get_types('name',$type);
    $this->assertText(t("@title has been updated", array('@title' => $title)));
  }

  function _testMerciStatus() {
    //TODO check merci_validate_status function. 
  }

  function _testMerciMaxHoursPerReservation() {
    // with/without override max hours over closed days permission.
    // with/without allow_weekends setting.
  }

  function _testMerciAllowOvernight() {
  }

  function _testMerciHoursOfOperation() {

    $today = date('Y-m-d');

    $day = strtolower(date('D'));

    $fancy_day = date('l');

    // Test start time to early 
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '08:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Reservations cannot start at a time before 9:00."));

    // Test end time to late 
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '16:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '23:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Reservations cannot end at a time after 17:00."));

    $hours = variable_get('merci_hours_'.$day,'');
    variable_set('merci_hours_'.$day,'');

    // Test start day on closed day 
    // Test end day on closed day
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertRaw(t("Reservations cannot start on a %day.",array('%day' => $fancy_day)));
    $this->assertRaw(t("Reservations cannot end on a %day.",array('%day' => $fancy_day)));

    // Return or config back to default.
    variable_set('merci_hours_'.$day,$hours);

  }

  function _testMerciClosedDays() {
    // Create merci user. 

    $closed = variable_get('merci_closed_dates','12-25');

    $today = '2010-'.$closed;

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("Sorry, but we are closed on December 25th for a holiday or special event."));
  }

  function _testMerciMaxDays() {

    $max_days = 2;
    variable_set("merci_max_days_advance_reservation", $max_days);

    $max_days++;

    $later = date('Y-m-d',time() + $max_days * 24 * 3600);
    $today = date('Y-m-d');

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $today,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $today,
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => $later,
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => $later,
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    $this->assertText(t("You cannot make a Reservation more than 2 days in advance."));
    variable_set("merci_max_days_advance_reservation", 0);
  }

  function _testMerciBucketAvailability() {

    // Test we can reserve our three bucket items all at the same time.
    // Test the fourth reservation at the same time will fail.

    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Create our second reservation
    $node = $this->bucket2;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $second = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Create our third reservation
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $third = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Try to create our fourth reservation.  This should FAIL
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $fail = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    //$this->assertText(t("The dates and times for @title conflict with one or more existing reservations", array('@title' => $node->type)));
    $this->assertText(t("conflict with one or more existing reservations"));

    // Try creating the reservation at a different time.
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-06',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-06',
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $fourth = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Test updating current reservations.
    // Also set the times so they will share a bucket item.  Tetris

    // Update second reservation.
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:00',
    );

    $title = $second->title;

    $second = $this->merciUpdateNode($second->nid,$edit);
    $this->assertText(t("@title has been updated.", array('@title' => $title)));

    // Update our third reservation
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '10:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
    );

    $title = $third->title;
    $third = $this->merciUpdateNode($third->nid,$edit);
    $this->assertText(t("@title has been updated.", array('@title' => $title)));

    // Now that the above two reservations are sharing an item ....
    // Try to create our fourth reservation.  This should now PASS 
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $pass = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Login the merci user.
    $this->drupalLogin($this->admin_user);
    // Cancel the last reservation.  This should Pass
    $edit = array(
      'merci_reservation_status' => 5,
    );

    $title = $pass->title;
    $pass = $this->merciUpdateNode($pass->nid,$edit);
    $this->assertText(t("@title has been updated.", array('@title' => $title)));
    // Login the merci user.
    $this->drupalLogin($this->merci_user);
    // Try to create our fifth reservation.  This should Pass
    $node = $this->bucket3;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type
    );

    $pass = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

  }
  function _testMerciResourceAvailability() {
    // Create our third reservation
    $node = $this->resource;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->nid,
      //'choice[choice_1][item]' => $node->nid,
      //'merci_reservation_items[choice_1][merci_item_nid]' => $node->nid
    );

    $third = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    $title = $edit['title'];
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
    );

    $fourth = $this->merciUpdateNode($third->nid,$edit);
    $this->assertText(t("@title has been updated", array('@title' => $title)));
    // Try to create our fourth reservation.  This should FAIL
    $node = $this->resource;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '10:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->nid,
    );

    $fail = $this->merciCreateNode('merci-reservation',$edit,FALSE);
    //$this->assertText(t("The dates and times for @title conflict with one or more existing reservations", array('@title' => $node->type)));
    $this->assertText(t("conflict with one or more existing reservations"));

  }

  function _testIssue1070662() {
    // Create our reservation with no title.
    $node = $this->resource;
    $edit = array(
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->nid,
    );

    $third = $this->merciCreateNode('merci-reservation',$edit, FALSE);
    $this->assertText(t("Title field is required."));
    $this->assertNoText(t("Reservations cannot start at a time before"));
  }

  function _testIssue1070658() {
    // Create our first reservation
    $node = $this->bucket1;
    $edit = array(
      'title' => $this->randomName(),
      'field_merci_date[0][value][date]' => '2011-01-05',
      'field_merci_date[0][value][time]' => '09:15',
      'field_merci_date[0][value2][date]' => '2011-01-05',
      'field_merci_date[0][value2][time]' => '11:15',
      'merci_reservation_items[choice_1][merci_item_nid]' => $node->type,
      'merci_reservation_items[choice_2][merci_item_nid]' => $node->type
    );

    $first = $this->merciCreateNode('merci-reservation',$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));

    // Create merci staff user. 
    $staff_user = $this->drupalCreateUser(array(
      'view revisions',
      'revert revisions',
      'create confirmed reservations',
      'edit own bucket content',
      'delete own bucket content',
      'edit own resource content',
      'delete own resource content',
      'create reservations',
      'access devel information',
      'manage reservations',
      'administer nodes'
    ));
    $this->drupalLogin($staff_user);
    $edit = array(
      'merci_reservation_items[1][merci_item_nid]' => $node->nid,
      'merci_reservation_items[2][merci_item_nid]' => $node->nid
      );
    $fourth = $this->merciUpdateNode($first->nid,$edit);
    $this->assertText(t("You've selected too many @name", array('@name' => $node->title)));
  }

  function testMerciUserCase() {
    $this->_testIssue1070662();
    $this->_testIssue1070658();
    $this->_testMerciResourceAvailability();
    $this->_testMerciBucketAvailability();
    $this->_testMerciHoursOfOperation();
    $this->_testMerciClosedDays();
    $this->_testMerciMaxDays();
    // This test fails because of the globlal user varible used in simpletest.  Not sure how to fix.
    //$this->_testMerciStaffModule();
  }
}
class MerciAdminTestCase extends MerciTestCase {
  public static function getInfo() {
    return array(
      'name' => 'MERCI admin level testing',
      'description' => 'Verify MERCI node type.',
      'group' => 'Merci',
    );
  }
  function setUp() {
    // Enable the module.
    parent::setUp();
  }
  function testMerciBucketContent() {
    // TODO test creating a bukcet content item and all the settings are correct.
    $settings = array (
        'type'  => 'bucket',
        );
    // Create resource content type
    // Disable the rating for this content type: 0 for Disabled, 1 for Enabled.
    $merci_settings = array(
        'merci_max_hours_per_reservation' => 5,
        'merci_allow_overnight' => TRUE,
        'merci_allow_weekends' => TRUE,
        'merci_spare_items' => 3 ,
        'merci_min_cancel_hours' => 3,
        'merci_autocheckout' => TRUE,
        'merci_autocheckin' => TRUE,
        'merci_selfcheckout' => TRUE,
        'merci_auto_assign_bucket_item' => TRUE,
        'merci_active_status' => MERCI_STATUS_ACTIVE,
    );
    $type = $this->merciCreateContentType($settings,'bucket',$merci_settings);

    $content_settings = merci_content_types($type);
    $settings = array();

    $this->_compareArrayForChanges($settings,$content_settings,"!key matches");
    //$this->verbose('Node created: ' . var_export($content_settings, TRUE));
    // Create resource item
    $edit = array(
      'title' => $this->randomName()
    );

    $this->bucket1 = $this->merciCreateNode($type,$edit);
    $this->assertText(t("@title has been created", array('@title' => $edit['title'])));
  }

  function _compareArrayForChanges($fields, $data, $message, $prefix = '') {
    foreach ($fields as $key => $value) {
      $newprefix = ($prefix == '') ? $key : $prefix .']['. $key;
      if (is_array($value)) {
        $compare_to = isset($data[$key]) ? $data[$key] : array();
        $this->_compareArrayForChanges($value, $compare_to, $message, $newprefix);
      }
      else {
        $this->assertEqual($value, $data[$key], t($message, array('!key' => $newprefix)));
      }
    }
  }
  /*
  function testMerciResourceContent() {
    // TODO test creating a resource content item and all the settings are correct.
  }

  function testMerciTypeSettings() {
    // TODO test creating a bucket and reource type and all the settings are correct (saved == retrieved).
  }
   */
}
