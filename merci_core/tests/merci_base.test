<?php

/**
 * @file
 * Defines abstract base test class for the Merci module tests.
 */

/**
 * Abstract class for Merci testing. All Merci tests should extend this
 * class.
 */
abstract class MerciBaseTestCase extends DrupalWebTestCase {

  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'all': (default) All Merci modules, including UI.
   *    'ui': All API and UI modules.
   *    'api': Just API modules.
   *    'dependencies': Common dependencies required by many Merci API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {

    $dependencies = array(
      // API
      'commerce',
      'commerce_ui',
      'commerce_line_item',
      'commerce_price',
      'commerce_product',
      'commerce_product_ui',
      'commerce_product_reference',
      'ctools',
      'entity',
      'field',
      'field_ui',
      'field_sql_storage',
      'list', 
      'taxonomy',
      'date', 
      'date_api',
      'date_popup', 
      'entityreference', 
      'viewfield',
      'views',
    );
    $api = array(
      'merci_core',
      'merci_line_item',
      //'merci_hours',
    );
    $ui = array(
      'merci_line_item_ui',
      'merci_reservation',
      'merci_restrictions',
      'merci_permissions',
      'merci_printable_contract',
    );

    // Final module list
    $modules = array();

    // Cascade down the list and add sets
    switch ($set) {
      case 'all':
      case 'ui':
        $modules = array_merge($ui, $modules);
      case 'api':
        $modules = array_merge($api, $modules);
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $site_admin = array(
      'administer blocks',
      'administer comments',
      'access dashboard',
      'administer filters',
      'administer image styles',
      'administer menu',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer url aliases',
      'administer search',
      'administer modules',
      'administer site configuration',
      'administer themes',
      'administer software updates',
      'administer actions',
      'access administration pages',
      'access site in maintenance mode',
      'access site reports',
      'block IP addresses',
      'administer taxonomy',
      'administer permissions',
      'administer users',
    );
    $merci_admin = array(
      'access administration pages',
      'administer MERCI',
      'administer all merci hours',
      'administer merci line item types',
      'administer merci line items',
      'administer merci_reservation types',
      'administer all merci restrictions',

      // TODO tests not based on commerce.
      'configure store',
      'administer line items',
      'administer line item types',
      'administer commerce_product entities',
      'administer product types',
      'administer rules',

    );
    $merci_operator = array(
      'administer merci line items',
      'override merci permissions',
      'create merci_reservation entities',
      'view merci_reservation entities',
      'edit any merci_reservation entities',
      'view any commerce_product entity',

    );
    $merci_customer = array(
      'create merci_reservation entities',
      'view merci_reservation entities',
      'edit own merci_reservation entities',
      'view any commerce_product entity',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'site admin':
          $final_permissions = array_unique($site_admin);
          break;
        case 'merci admin':
          $final_permissions = array_unique($merci_admin);
          break;
        case 'merci operator':
          $final_permissions = array_unique($merci_operator);
          break;
        case 'merci customer':
          $final_permissions = array_unique($merci_customer);
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHelper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }

  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createSiteAdmin() {
    return $this->createUserWithPermissionHelper('site admin');
  }

  /**
   * Returns a store administrator user. Only has permissions for administering
   * Merci modules.
   */
  protected function createMerciAdmin() {
    return $this->createUserWithPermissionHelper('merci admin');
  }

  /**
   * Returns a customer. It's a regular user with some Merci
   * permissions as access to checkout.
   */
  protected function createMerciOperator() {
    return $this->createUserWithPermissionHelper('merci operator');
  }

  /**
   * Returns a customer. It's a regular user with some Merci
   * permissions as access to checkout.
   */
  protected function createMerciCustomer() {
    return $this->createUserWithPermissionHelper('merci customer');
  }

  /**
   * Creates a dummy product type for use with other tests.
   *
   * @return
   *  A product type.
   *  FALSE if the appropiate modules were not available.
   */
  public function createDummyProductType($type = 'product_type', $name = 'Product Type', $description = '', $help = '', $append_random = TRUE) {
    if (module_exists('commerce_product_ui')) {
      if ($append_random) {
        $type = $type .'_'. $this->randomName(20 - strlen($type) - 1);
        $name = $name .' '. $this->randomName(40 - strlen($name) - 1);
        $description = $description .' '. $this->randomString(128);
        $help = $help .' '. $this->randomString(128);
      }

      $new_product_type = commerce_product_ui_product_type_new();
      $new_product_type['type'] = $type;
      $new_product_type['name'] = $name;
      $new_product_type['description'] = $description;
      $new_product_type['help'] = $help;
      $new_product_type['is_new'] = TRUE;

      $save_result = commerce_product_ui_product_type_save($new_product_type);

      if ($save_result === FALSE) {
        return FALSE;
      }

      return $new_product_type;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Creates a dummy product for use with other tests.
   *
   * @param $type_given
   *  Optional. The product type to base this product on. Defaults to 'product'.
   * @return
   *  A product type with most of it's basic fields set random values.
   *  FALSE if the appropiate modules were not available.
   */
  public function createDummyProduct($sku = '', $title = '', $amount = -1, $currency_code = 'USD', $uid = 1, $type_given = 'merci_resource') {
    if (module_exists('commerce_product')) {
      $new_product = commerce_product_new($type_given);
      $new_product->sku = empty($sku) ? $this->randomName(10) : $sku;
      $new_product->title = empty($title) ? $this->randomName(10) : $title;
      $new_product->uid = $uid;

      $new_product->commerce_price[LANGUAGE_NONE][0]['amount'] = ($amount < 0) ? rand(2, 500) : $amount;
      $new_product->commerce_price[LANGUAGE_NONE][0]['currency_code'] = 'USD';

      $new_product->field_quantity[LANGUAGE_NONE][0]['value'] = '1';

      commerce_product_save($new_product);

      return $new_product;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Create a dummy product display content type.
   *
   * @param $type
   *  Machine name of the content type to create. Also used for human readable
   *  name to keep things simple.
   * @param $attach_product_reference_field
   *  If TRUE, automatically add a product reference field to the new content
   *  type.
   * @param $field_name
   *  Only used if $attach_product_reference_field is TRUE. Sets the name for
   *  the field instance to attach. Creates the field if it doesn't exist.
   * @param $cardinality_reference_field
   *  Only used if $attach_product_reference_field is TRUE. Sets the
   *  cardinality for the field instance to attach.
   * @return
   *  An object for the content type.
   * @see attachProductReferenceField()
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product', $cardinality_reference_field = 1) {
    // If the specified node type already exists, return it now.
    if ($content_type = node_type_load($type)) {
      return $content_type;
    }

    $content_type = array(
      'type' => $type,
      'name' => $type, // Don't use a human readable name here to keep it simple.
      'base' => 'node_content',
      'description' => 'Use <em>product displays</em> to display products for sale to your customers.',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $content_type = node_type_set_defaults($content_type);
    node_type_save($content_type);
    node_add_body_field($content_type);
    $this->pass("Created content type: $type");


    if ($attach_product_reference_field) {
      // Maybe $instance should be returned as well
      $instance = $this->attachProductReferenceField($type, $field_name, $cardinality_reference_field);
    }

    return $content_type;
  }

  /**
   * Create a dummy order in a given status.
   *
   * @param $uid
   * 	 ID of the user that owns the order.
   * @param $products
   *  	Array of products that are going to be added to the order: keys are
   *    product ids, values are the quantity of products to add.
   * @param $status
   * 	 Status of the order
   *
   * @return
   *   A commerce order object in the given status.
   */
  public function createDummyLineItem($uid = 1, $products = array(), $dates = array()) {
    // If there aren't any products to add to the order, create one.
    if (empty($products)) {
      $product = $this->createDummyProduct('PROD-01', 'Product One', -1, 'USD', $uid);
      $products[$product->product_id] = rand(1,10);
    }

    if (empty($dates)) {
      $dates = array(
        'value' => date('Y-m-d H:i:s'),
        'value2' => date('Y-m-d H:i:s', time() + 3600),
        'timezone' => 'America/Los Angeles',
        'timezone_db' => 'UTC',
        'data_type' => 'datetime',
      );
    }


    $default_values = array(
      'type' => 'merci_line_item',
    );

    $line_item = entity_create('merci_line_item', $default_values);

    $wrapper = entity_metadata_wrapper('merci_line_item', $line_item);

    // TODO support for multiple products.
    reset($products);
    $wrapper->{MERCI_RESOURCE_REFERENCE}->set(key($products));
    $wrapper->{MERCI_CHECKOUT_DATES}->set($dates);

    $wrapper->save();

    $this->verbose(print_r($wrapper->value(), TRUE));
    return $wrapper->value();
  }

  /**
   * Create a dummy order in a given status.
   *
   * @param $uid
   * 	 ID of the user that owns the order.
   * @param $products
   *  	Array of products that are going to be added to the order: keys are
   *    product ids, values are the quantity of products to add.
   * @param $status
   * 	 Status of the order
   *
   * @return
   *   A commerce order object in the given status.
   */
  public function createDummyReservation($uid = 1, $products = array(), $status = 'cart', $customer_profile_id = NULL) {
    // If there aren't any products to add to the order, create one.
    if (empty($products)) {
      $product = $this->createDummyProduct('PROD-01', 'Product One', -1, 'USD', $uid);
      $products[$product->product_id] = rand(1,10);
    }

    // Create a new shopping cart order by adding the products to it.
    foreach($products as $product_id => $quantity) {
      if ($product = commerce_product_load($product_id)) {
        $line_item = commerce_product_line_item_new($product, $quantity);
        $line_item = commerce_cart_product_add($uid, $line_item);
      }
    }

    // Load the order for returning it.
    $order = commerce_cart_order_load($uid);

    if (!empty($customer_profile_id)) {
      $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $customer_profile_id;
    }

    // If the order should be in a different status, update it.
    if ($status <> 'cart') {
      $order = commerce_order_status_update($order, $status, TRUE);
    }

    commerce_order_save($order);

    return $order;
  }

  /**
   * Attach a product reference field to a given content type. Creates the field
   * if the given name doesn't already exist. Automatically sets the display
   * formatters to be the "add to cart form" for the teaser and full modes.
   *
   * @param $content_type
   *  Name of the content type that should have a field instance attached.
   * @param $field_name
   *  Only used if $attach_product_reference_field is TRUE. Sets the name for
   *  the field instance to attach. Creates the field if it doesn't exist.
   * @return
   *  An object containing the field instance that was created.
   * @see createDummyProductDisplayContentType()
   */
  public function attachProductReferenceField($content_type = 'product_display', $field_name = 'field_product', $cardinality = 1) {
    if (module_exists('commerce_product')) {
      // Check if the field has already been created.
      $field_info = field_info_field($field_name);
      if (empty($field_info)) {
        // Add a product reference field to the product display node type
        $field = array(
          'field_name' => $field_name,
          'type' => 'commerce_product_reference',
          'cardinality' => $cardinality,
          'translatable' => FALSE,
        );
        field_create_field($field);
        $this->pass("New field created: $field_name");
      } else {
        debug("NOTE: attachProductReferenceField attempting to create field <code>$field_name</code> that already exists. This is fine and this message is just for your information.");
      }

      // Check that this instance doesn't already exist
      $instance = field_info_instance('node', $field_name, $content_type);
      if (empty($insance)) {
        // Add an instance of the field to the given content type
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'label' => 'Product',
          'bundle' => $content_type,
          'description' => 'Choose a product to display for sale.',
          'required' => TRUE,

          'widget' => array(
            'type' => 'options_select',
          ),

          'display' => array(
            'default' => array(
              'label' => 'hidden',
              'type' => 'commerce_cart_add_to_cart_form',
            ),
            'teaser' => array(
              'label' => 'hidden',
              'type' => 'commerce_cart_add_to_cart_form',
            ),
          ),
        );
        field_create_instance($instance);
        $this->pass("Create field instance of field <code>$field_name</code> on content type <code>$content_type</code>");
      } else {
        $this->fail("Test Develoepr: You attempted to create a field that already exists. Field: $field_name -- Content Type: $content_type");
      }
      return $instance;
    } else {
      $this->fail('Cannot create product reference field because Product module is not enabled.');
    }
  }

  /**
   * Creates a product display node with an associated product.
   *
   * @param $product_ids
   *  Array of product IDs to use for the product reference field.
   * @param $title
   *  Optional title for the product node. Will default to a random name.
   * @param $product_display_content_type
   *  Machine name for the product display content type to use for creating the
   *  node. Defaults to 'product_display'.
   * @param $product_ref_field_name
   *  Machine name for the product reference field on this product display
   *  content type. Defaults to 'field_product'.
   * @return
   *  The newly saved $node object.
   */
  public function createDummyProductNode($product_ids, $title = '', $product_display_content_type = 'product_display', $product_ref_field_name = 'field_product') {
    if (module_exists('commerce_product')) {
      if (empty($title)) {
        $title = $this->randomString(10);
      }
      $node = (object) array('type' => $product_display_content_type);
      node_object_prepare($node);
      $node->uid = 1;
      $node->title = $title;
      foreach ($product_ids as $product_id) {
        $node->{$product_ref_field_name}[LANGUAGE_NONE][]['product_id'] = $product_id;
      }
      node_save($node);
      return $node;
    } else {
      $this->fail(t('Cannot use use createProductNode because the product module is not enabled.'));
    }
  }

  	/**
     * Create a full product node without worrying about the earlier steps in
     * the process.
     *
     * @param $count
     *  Number of product nodes to create. Each one will have a new product
     *  entity associated with it. SKUs will be like PROD-n. Titles will be
     *  like 'Product #n'. Price will be 10*n. Counting begins at 1.
     * @return
     *  An array of product node objects.
     */
  public function createDummyProductNodeBatch($count) {
    $this->createDummyProductDisplayContentType();
    $product_nodes = array();
    for ($i=1; $i<$count; $i++) {
      $sku = "PROD-$i";
      $title = "Product #$i";
      $price = $i*10;
      $product = $this->createDummyProduct($sku, $title, $price);
      $product_node = $this->createDummyProductNode(array($product->product_id), $title);
      $product_nodes[$i] = $product_node;
    }
    return $product_nodes;
  }


  // =============== Helper functions ===============

  /**
   * Checks if a group of modules is enabled.
   *
   * @param $module_name
   *  Array of module names to check (without the .module extension)
   * @return
   *  TRUE if all of the modules are enabled.
   */
  protected function modulesUp($module_names) {
    if (is_string($module_names)) {
      $module_names = array($module_names);
    }
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        return FALSE;
      }
    }
    return TRUE;
  }

  /**
   * Generate random valid information for Address information.
   */
  protected function generateAddressInformation() {
    $address_info['name_line'] = $this->randomName();
    $address_info['thoroughfare'] = $this->randomName();
    $address_info['locality'] = $this->randomName();
    $address_info['postal_code'] = rand(00000, 99999);
    $address_info['administrative_area'] = 'KY';

    return $address_info;
  }

  /**
   * Generate a random valid email
   *
   * @param string $type
   *  Domain type
   *
   * @return string
   *  Valid email
   */
  protected function generateEmail($type = 'com'){
    return $this->randomName() . '@' . $this->randomName() . '.' . $type;
  }

  /**
   * Assertions for Drupal Merci.
   */

  /**
   *	Asserts that a product has been created.
   *
   * @param $product
   *  A full loaded commerce_product object.
   * @param $user
   * 	User that access the admin pages. Optional, if not informed, the check
   * 	is done with the store admin.
   */
  public function assertProductCreated($product, $user = NULL) {
    // Check if the product is not empty and reload it from database.
    $this->assertFalse(empty($product), t('Product object is not empty'));
    $product = commerce_product_load($product->product_id);
    $this->assertFalse(empty($product), t('Product object is correctly loaded from database'));

    // Access to the admin page for the product and check if the product is there.
    if (empty($user)) {
      $user = $this->createMerciAdmin();
    }
    $this->drupalLogin($user);
    $this->drupalGet('admin/commerce/products/' . $product->product_id);
    $this->assertFieldById('edit-sku', $product->sku, t('When editing the product in the administration interface, the SKU is informed correctly'));
    $this->assertFieldById('edit-title', $product->title, t('When editing the product in the administration interface, the Title is informed correctly'));
  }

}


/**
 * Sandbox for trying new things with tests. Eases development so only one test
 * has to run at a time. Move everything to MerciBaseTesterTestCase after it
 * is functioning here.
 */
class MerciSandboxTestCase extends MerciBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Merci sandbox'),
      'description' => t('Sandbox for trying new things with tests. Eases development so only one test has to run at a time.'),
      'group' => t('Drupal Merci'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Sandbox for test development
   */
  public function testTestTest() {
    $operator_user = $this->createMerciOperator(array('access checkout'));
    $this->drupalLogin($operator_user);

    $sku = 'PROD-01';
    $product_name = 'Product One';
    $product = $this->createDummyProduct($sku, $product_name);
    $line_item = $this->createDummyLineItem($operator_user->uid, array($product->product_id => 1));

    $this->drupalGet("merci_line_item/{$line_item->line_item_id}/edit");
    $this->assertFieldById('edit-merci-resource-reference-und-0-target-id', $product_name . ' (' . $product->product_id . ')', t('When editing the product in the administration interface, the SKU is informed correctly'));

  }
}


/**
 * Test class to test the MerciBaseTestCase functions. All testTestFoo
 * functions have "testTest" in the name to indicate that they are verifying
 * that a test is working. Somewhat "meta" to do this, but it eases test
 * development.
 */
class MerciBaseTesterTestCase extends MerciBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Merci base'),
      'description' => t('Test the functionality of the base test class. Essentially, these are meta-tests.'),
      'group' => t('Drupal Merci'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Ensure that all of the Merci modules (and their dependencies) are
   * enabled in the test environment.
   */
  public function testModulesEnabled() {
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/modules');

    $module_ids = array(
      'edit-modules-chaos-tool-suite-ctools-enable',

      'edit-modules-core-field-enable',
      'edit-modules-core-field-ui-enable',
      'edit-modules-core-field-sql-storage-enable',
      'edit-modules-core-list-enable',
      'edit-modules-core-taxonomy-enable',

      'edit-modules-datetime-date-enable',
      'edit-modules-datetime-date-api-enable',
      'edit-modules-datetime-date-popup-enable',

      'edit-modules-fields-entityreference-enable',
      'edit-modules-fields-viewfield-enable',

      'edit-modules-merci-merci-core-enable',
      'edit-modules-merci-merci-line-item-enable',
      'edit-modules-merci-merci-hours-enable',
      'edit-modules-merci-merci-reservation-enable',
      'edit-modules-merci-merci-restrictions-enable',
      'edit-modules-merci-merci-permissions-enable',
      'edit-modules-merci-merci-printable-contract-enable',

      'edit-modules-commerce-commerce-enable',
      'edit-modules-commerce-commerce-ui-enable',
      'edit-modules-commerce-commerce-price-enable',
      'edit-modules-commerce-commerce-line-item-enable',
      'edit-modules-commerce-commerce-product-enable',
      'edit-modules-commerce-commerce-product-reference-enable',
      'edit-modules-commerce-commerce-product-ui-enable',

      'edit-modules-other-entity-enable',

      'edit-modules-views-views-enable',
    );
    foreach ($module_ids as $module_id) {
      $this->assertFieldChecked($module_id);
    }
  }

  /**
   * Test that Store Admin role actually gets set up.
   */
  public function testTestMerciAdmin() {
    $store_admin = $this->createMerciAdmin();
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/people/permissions');
    // This will break if it isn't the second role created
    $this->assertFieldChecked('edit-3-administer-merci');
  }

  /**
   * Make a test product type.
   */
  public function testTestCreateDummyProductType() {
    $product_type = $this->createDummyProductType();
    $store_admin = $this->createMerciAdmin();
    $this->drupalLogin($store_admin);
    $this->drupalGet('admin/commerce/products/types');
    $this->assertText($product_type['name'], t('Dummy product type name found on admin/commerce/products/types'));
  }

  /**
   * Make a test product.
   */
  public function _testTestCreateDummyProduct() {
    // Create the product.
    $product = $this->createDummyProduct();

    // Login with the store admin.
    $store_admin = $this->createMerciAdmin();
    $this->drupalLogin($store_admin);

    // Assert that the product is in the product listing.
    $this->drupalGet('admin/commerce/products');
    $this->assertText($product->title, t('Dummy product found on admin page at admin/commerce/products'));
    $this->drupalGet('admin/commerce/products/list');
    $this->assertText($product->title, t('Dummy product found on admin page at admin/commerce/products/list'));
  }

  /**
   * Test the creation of a product_display content type and add a product
   * reference field to the content type.
   */
  public function _testTestCreateDummyProductDisplayAndRefField() {
    $this->createDummyProductDisplayContentType();

    $this->drupalLogin($this->site_admin);
    $this->drupalGet('node/add/product-display');
    $this->assertText('product_display', t('product_display content type successfully created and accessible.'));
    //$this->assertOptionSelected('edit-field-product-und', '_none', 'Dummy Product Display reference field shows up on node add page');
    $this->assertFieldById('edit-field-product-und', '', t('Product reference field found on Dummy Product Display.'));

    // Try to add the same field a second time and see if any errors pop up.
    //  If uncommented, this will product an error. Basically, this should be
    //  turned into an assertion that checks for the presence of the field.
    //$this->attachProductReferenceField('product_display', 'field_product');
  }

  /**
   * Test the createDummyProductNode function.
   */
  public function _testTestCreateDummyProductNode() {
    // Create a dummy product display content type
    $this->createDummyProductDisplayContentType();

    // Create dummy product display nodes (and their corresponding product
    //  entities)
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $product = $this->createDummyProduct($sku, $product_name);
    $product_node = $this->createDummyProductNode(array($product->product_id), $product_name);

    $this->drupalLogin($this->site_admin);
    $this->drupalGet("node/{$product_node->nid}");
    $this->assertText($product_name, t('Product !product_name created successfully', array('!product_name' => $product_name)));
  }

  /**
   * Test the createDummyProductNodeBatch function.
   */
  public function _testTestCreateDummyProductNodeBatch() {
    $product_nodes = $this->createDummyProductNodeBatch(3);
    $this->drupalLogin($this->site_admin);
    $product_node = $product_nodes[1];
    $this->drupalGet("node/{$product_node->nid}");
    $this->assertText($product_node->title, t('Product !product_title node page exists', array('product_title' => $product_node->title)));
  }

  /**
   * Test the createDummyReservation function.
   */
  public function testTestCreateDummyLineItem() {
    $operator_user = $this->createMerciOperator(array('access checkout'));
    $this->drupalLogin($operator_user);

    $sku = 'PROD-01';
    $product_name = 'Product One';
    $product = $this->createDummyProduct($sku, $product_name);
    $line_item = $this->createDummyLineItem($operator_user->uid, array($product->product_id => 1));

    $this->drupalGet("merci_line_items/{$line_item->line_item_id}/edit");
    $this->assertFieldById('edit-merci-resource-reference-und-0-target-id', $product_name . ' (' . $product->id . ')', t('When editing the product in the administration interface, the SKU is informed correctly'));

  }
}
