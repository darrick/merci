<?php


/**
 * @file
 * MERCI - Managed Equipment Reservation Checkout and Inventory
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function merci_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
  // Load the export_ui plugin.
  if ($plugin =='export_ui') {
    return 'plugins/export_ui';
  }
}

function merci_preset_load_settings($machine_name) {
  $preset = merci_preset_load($machine_name);
  return $preset['settings'];
}
/**
 * Load the given preset(s).
 * @param string $machine_name
 * @return array
 */
function merci_preset_load($machine_name = NULL) {
  ctools_include('export');
  if (isset($machine_name)) {
    $items = ctools_export_crud_load('merci_preset', $machine_name);

    // CTools returns an object, so we explictly typecast it to array before
    // returning.
    return $items = (array) $items;
  }
  else {
    $result = ctools_export_crud_load_all('merci_preset');
    if (!empty($result)) {
      foreach ($result as $key => $item) {
        $items[$key] = (array) $item;
      }
      return $items;
    }
  }
}

/**
 * Implements hook_permission().
 */
function merci_permission() {
  return array(
    'create reservations' => array(
      'title' => t('create reservations'),
      'description' => t('TODO Add a description for \'create reservations\''),
    ),
    'suspend MERCI access' => array(
      'title' => t('suspend MERCI access'),
      'description' => t('TODO Add a description for \'suspend MERCI access\''),
    ),
    'administer MERCI' => array(
      'title' => t('administer MERCI'),
      'description' => t('TODO Add a description for \'administer MERCI\''),
    ),
    'manage reservations' => array(
      'title' => t('manage reservations'),
      'description' => t('TODO Add a description for \'manage reservations\''),
    ),
    'view all reservations' => array(
      'title' => t('view all reservations'),
      'description' => t('TODO Add a description for \'view all reservations\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function merci_menu() {


  // Standard Administration settings.
  $items['admin/config/merci'] = array(
    'title' => 'MERCI',
    'description' => 'Administer MERCI modules.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer MERCI'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/system/merci/settings'] = array(
    'title' => 'Settings',
    'description' => 'MERCI general settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer MERCI'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merci_admin_settings'),
    'file' => 'includes/merci.admin.inc'
  );


  return $items;
}

/**
 * Implements hook_simpletest().
 */
function merci_simpletest() {
  $dir = drupal_get_path('module', 'merci') . '/tests';
  $tests = file_scan_directory($dir, '/\.test$/');
  return array_keys($tests);
}

/**
 * Create an organic groups field in a bundle.
 *
 * @param $field_name
 *   The field name
 * @param $entity_type
 *   The entity type
 * @param $bundle
 *   The bundle name.
 */
function merci_create_field($field_name, $entity_type, $bundle) {
  if ($merci_field = merci_fields_info($field_name)) {
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = field_create_field($merci_field['field']);
    }

    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (empty($instance)) {
      $instance = $merci_field['instance'];
      $instance += array(
        'field_name' => $field_name,
        'bundle' => $bundle,
        'entity_type' => $entity_type,
      );

      field_create_instance($instance);
    }
  }
}

/**
 * Get all the modules fields that can be assigned to fieldable enteties.
 */
function merci_fields_info($field_name = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('merci_fields_info') as $module) {
      if ($fields = module_invoke($module, 'merci_fields_info')) {
        foreach ($fields as $key => $field) {
          // Add default values.
          $field += array(
            'entity type' => array(),
            'disable on node translate' => TRUE,
          );

          // Add the module information.
          $return[$key] = array_merge($field, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('merci_fields_info', $return);
  }

  return empty($field_name) ? $return : $return[$field_name];
}

/**
* Implement hook_node_type_insert().
*/
function merci_node_type_insert($info) {
  merci_node_type_save($info->type);
}

/**
* Implement hook_node_type_update().
*/
function merci_node_type_update($info) {
  merci_node_type_save($info->type);
}

/**
 * Add group and group content fields to new content types.
 *
 * @param $bundle_name
 *   The content type name.
 */
function merci_node_type_save($bundle_name) {
  module_invoke_all('merci_node_type_save', $bundle_name);
}

