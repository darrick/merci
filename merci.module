<?php

/**
 * @file
 * Module for the Merci Entity - a starting point to create your own Entity
 * and associated administration interface
 */

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function merci_entity_info() {
  $return['merci'] = array(
    'label' => t('Merci'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Merci',
    'controller class' => 'MerciController',
    'base table' => 'merci',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'merci_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the merci types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'merci_create',
    'access callback' => 'merci_access',
    'module' => 'merci',
    // The information below is used by the MerciUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/merci',
      'file' => 'merci.admin.inc',
      'controller class' => 'MerciUIController',
      'menu wildcard' => '%merci',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['merci_type'] = array(
    'label' => t('Merci Type'),
    'entity class' => 'MerciType',
    'controller class' => 'MerciTypeController',
    'base table' => 'merci_type',
    'fieldable' => FALSE,
    'bundle of' => 'merci',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'merci_type_access',
    'module' => 'merci',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/merci_types',
      'file' => 'merci_type.admin.inc',
      'controller class' => 'MerciTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the merci types via a hook to avoid a recursion
 * issue as loading the merci types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function merci_entity_info_alter(&$entity_info) {
  foreach (merci_get_types() as $type => $info) {
    $entity_info['merci']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/merci_types/manage/%merci_type',
        'real path' => 'admin/structure/merci_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer merci types'),
    ),
  );
  }
}


/**
 * Implements hook_permission().
 */
function merci_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer merci types' => array(
      'title' => t('Administer merci types'),
      'description' => t('Create and delete fields for merci types, and set their permissions.'),
    ),
    'administer merci' => array(
      'title' => t('Administer merci'),
      'description' => t('Edit and delete all merci'),
    ),  
  );

  //Generate permissions per merci 
  foreach (merci_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name merci" => array(
        'title' => t('%type_name: Edit any merci', array('%type_name' => $type->label)),
      ),
      "view any $type_name merci" => array(
        'title' => t('%type_name: View any merci', array('%type_name' => $type->label)),
    ),
  );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a merci.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $merci
 *   Optionally a merci or a merci type to check access for. If nothing is
 *   given, access for all mercis is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function merci_access($op, $merci = NULL, $account = NULL) {
  if (user_access('administer merci', $account)) {
    return TRUE;
      }
  if (isset($merci) && $type_name = $merci->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name merci", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function merci_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer merci types', $account);
}


/**
 * Gets an array of all merci types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return MerciType[]
 *   Depending whether $type isset, an array of merci types or a single one.
 */
function merci_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our merci entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('merci_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a merci type by string.
 *
 * @param $type
 *   The machine-readable name of a merci type to load.
 * @return
 *   A merci type array or FALSE if $type does not exist.
 */
function merci_type_load($type) {
  return merci_get_types($type);
}


/**
 * Fetch a merci object. Make sure that the wildcard you choose 
 * in the merci entity definition fits the function name here.
 *
 * @param $merci_id
 *   Integer specifying the merci id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $merci object or FALSE if it cannot be loaded.
 *
 * @see merci_load_multiple()
 */
function merci_load($merci_id, $reset = FALSE) {
  $mercis = merci_load_multiple(array($merci_id), array(), $reset);
  return reset($mercis);
}


/**
 * Load multiple mercis based on certain conditions.
 *
 * @param $merci_ids
 *   An array of merci IDs.
 * @param $conditions
 *   An array of conditions to match against the {merci} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of merci objects, indexed by merci_id.
 *
 * @see entity_load()
 * @see merci_load()
 */
function merci_load_multiple($merci_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('merci', $merci_ids, $conditions, $reset);
}


/**
 * Deletes a merci.
   */
function merci_delete(Merci $merci) {
  $merci->delete();
}


/**
 * Delete multiple mercis.
 *
 * @param $merci_ids
 *   An array of merci IDs.
 */
function merci_delete_multiple(array $merci_ids) {
  entity_get_controller('merci')->delete($merci_ids);
}


/**
 * Create a merci object.
 */
function merci_create($values = array()) {
  return entity_get_controller('merci')->create($values);
}


/**
 * Saves a merci to the database.
 *
 * @param $merci
 *   The merci object.
 */
function merci_save(Merci $merci) {
  return $merci->save();
}


/**
 * Saves a merci type to the db.
 */
function merci_type_save(MerciType $type) {
  $type->save();
}


/**
 * Deletes a merci type from the db.
 */
function merci_type_delete(MerciType $type) {
  $type->delete();
}


/**
 * URI callback for mercis
 */
function merci_uri(Merci $merci){
  return array(
    'path' => 'merci/' . $merci->merci_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function merci_page_title(Merci $merci){
  return $merci->name;
}


/**
 * Sets up content to show an individual merci
 * @todo - get rid of drupal_set_title();
 */
function merci_page_view($merci, $view_mode = 'full') {    
  $controller = entity_get_controller('merci');  
  $content = $controller->view(array($merci->merci_id => $merci));
  drupal_set_title($merci->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function merci_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'merci') . '/views',
  );
}

  
/**
 * Implement hook_theme().
 */
function merci_theme() {
  return array(
    'merci_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'merci.admin.inc',
    ),
    'merci' => array(
      'render element' => 'elements',
      'template' => 'merci',
      ),
   'merci_sample_data' => array(
      'variables' => array('merci_sample_data', 'merci' => NULL),
      'template' => 'merci-sample-data',
    ),
    
    
  );
}

  
/**
 * Implements hook_menu_local_tasks_alter().
 */
function merci_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/mercis/add' on 'admin/structure/mercis'.
  if ($root_path == 'admin/content/merci') {
    $item = menu_get_item('admin/content/merci/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for merci entities
 */
class Merci extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'merci');
    }

  protected function defaultLabel() {
    return $this->name;
    }

  protected function defaultUri() {
    return array('path' => 'merci/' . $this->merci_id);
  }
  
  
}


/**
 * The class used for merci type entities
 */
class MerciType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'merci_type');
        }

}


/**
 * The Controller for Merci entities
 */
class MerciController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a merci - we first set up the values that are specific
   * to our merci schema but then also go through the EntityAPIController
   * function.
 *
   * @param $type
   *   The machine-readable type of the merci.
 *
 * @return
   *   A merci object with all default fields initialized.
 */
  public function create(array $values = array()) {
    // Add values that are specific to our Merci
    $values += array( 
      'merci_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
  );

    $merci = parent::create($values);
    return $merci;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['merci_sample_data'] =  array(
      '#markup' => theme('merci_sample_data', array('merci_sample_data' => check_plain($entity->data['sample_data']), 'merci' => $entity)),
      );

    return $content;
          }

}


/**
 * The Controller for Merci entities
 */
class MerciTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
    }

   /**
   * Create a merci type - we first set up the values that are specific
   * to our merci type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the merci.
   *
   * @return
   *   A merci type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Merci
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
        );
    $merci_type = parent::create($values);
    return $merci_type;
  }

}

function merci_field_widget_info() {
  return array(
    'merci_type_select' => array(
      'label' => t('Merci Type Select'),
      'field types' => array('entityreference'),
      ), 
    );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function merci_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $options = entityreference_options_list($field);
  dpm($options);
  // Load the items for form rebuilds from the field state as they might not be
  // in $form_state['values'] because of validation limitations. Also, they are
  // only passed in as $items when editing existing entities.
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
  }

}

