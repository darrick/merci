<?php

module_load_include('inc', 'merci', 'merci.validate');
define('MERCI_BUCKET', 'bucket');
define('MERCI_BUCKET_ITEM_FIELD', 'field_merci_bucket_items');

/**
 * Implementation of hook_form_alter().
 */
function merci_bucket_form_node_type_form_alter(&$form, &$form_state) {

  $node_type = $form['#node_type']->type;

  if (merci_type_setting($node_type) == MERCI_BUCKET) {
  }

  $description_items = array(
    MERCI_BUCKET => t('Use this content type to create interchangeable items that can be reserved (ex. Camera). Buckets reference interchangeable items. The actual item does not have to be chosen until the reservation is checked out.'),
  );
  $form['merci']['merci_type_setting']['#options'][MERCI_BUCKET] = t('Bucket');
  $form['merci']['merci_type_setting']['#description_items'] += $description_items;
}

function merci_bucket_field_attach_validate($entity_type, $entity, &$errors) {
  if (is_merci_reservation_node($entity)) {

    $merci_settings = merci_settings_load();
    $target_field = $merci_settings['target_field'];
    $date_field = $merci_settings['date_field'];
    $items = merci_api_extract_item_values($entity, $target_field);

    merci_bucket_merci_validate_items($entity_type, $entity, $date_field, $target_field, $items, &$errors);
  }
}

function merci_bucket_merci_validate_items($entity_type, $entity, $date_field, $target_field, $items, &$errors){

  $target_field_info = field_read_field($target_field);
  $target_type = $target_field_info['settings']['target_type'];
  $langcode = $entity ? $entity->language : LANGUAGE_NONE;

  foreach ($items as $delta => $item) {
    $target_id = $item['target_id'];
    $entities = entity_load($target_type, array($target_id));
    $node = reset($entities);
    $bucket_field = MERCI_BUCKET_ITEM_FIELD;
    if (merci_type_setting($node) != MERCI_BUCKET) {
      continue;
    }

    if(isset($node->{$bucket_field}[$langcode])) {
      // No slots for this reservation.
      $conflicts = merci_api_check_bucket_conflicts($entity_type, $entity, $date_field, $target_field, $bucket_field, $target_id); 
      dpm($conflicts);
      if ($conflicts){
        // Ran out out of items to use for this reservation.
        $errors[$target_field][$langcode][$delta][] = array(
          'error' => 'merci_item_conflict',
          'message' => t('%name: the bucket item cannot be reserved at this time.', array('%name' => $node->title)),
        );
        break;
      }
    } else {
        $errors[$target_field][$langcode][$delta][] = array(
          'error' => 'merci_item_conflict',
          'message' => t('%name: selected bucket item has no items.', array('%name' => $node->title)),
        );
        break;
    }

  }
}

/**
 * Add group and group content fields to new content types.
 *
 * @param $bundle_name
 *   The content type name.
 */
function merci_bucket_merci_node_type_save($bundle_name) {
  if (variable_get('merci_type_setting_' . $bundle_name, 'disabled') == MERCI_BUCKET) {
    merci_create_field(MERCI_BUCKET_ITEM_FIELD, 'node', $bundle_name);
  }
}

/**
 * Implements hook_merci_fields_info().
 */
function merci_bucket_merci_fields_info() {

  $items[MERCI_BUCKET_ITEM_FIELD] = array(
    'field' => array(
      'active' => '1',
      'cardinality' => '-1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => MERCI_BUCKET_ITEM_FIELD,
      'foreign keys' => array(
        'node' => array(
          'columns' => array(
            'target_id' => 'nid',
          ),
          'table' => 'node',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => '0',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'merci' => array(
              'status' => 0,
            ),
            'merci_select' => array(
              'status' => 0,
            ),
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
        ),
        'target_type' => 'node',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    ),
    'instance' => array(
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'entityreference',
          'settings' => array(
            'link' => FALSE,
          ),
          'type' => 'entityreference_label',
          'weight' => 1,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'label' => 'Bucket Items',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'multiple_selects',
        'settings' => array(),
        'type' => 'multiple_selects',
        'weight' => '-3',
      ),
    ),
  );
  return $items;
}
