<?php

// Reservation status options.

define('MERCI_STATUS_UNCONFIRMED', 1);
define('MERCI_STATUS_PENDING', 2);
define('MERCI_STATUS_CHECKED_OUT', 3);
define('MERCI_STATUS_CHECKED_IN', 4);
define('MERCI_STATUS_CANCELLED', 5);
define('MERCI_STATUS_DENIED', 6);
define('MERCI_STATUS_NO_SHOW', 7);
/**
 * Implements hook_field_widget_info().
 */
function merci_status_field_info() {
  $fields['merci_reservation_status'] = array(
    'label' => t('Merci reservation status'),
    'description' => t("Status of the reservation"),
    'settings' => array(
      'allowed_values' => array(),
      'allowed_values_function' => 'merci_status_allowed_values',
    ),
    'default_widget' => 'options_select',
    'default_formatter' => 'list_default',
  );

  return $fields;
}

function merci_status_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  list_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors);
}

function merci_status_field_is_empty($item, $field) {
  return list_field_is_empty($item, $field);
}

function merci_status_allowed_values($field, $instance, $entity_type, $entity) {
  $options = array(
    MERCI_STATUS_UNCONFIRMED => t('Unconfirmed'),
    MERCI_STATUS_PENDING  => t('Pending'),
    MERCI_STATUS_CHECKED_OUT      => t('Checked out'),
    MERCI_STATUS_CHECKED_IN      => t('Checked in'),
    MERCI_STATUS_CANCELLED      => t('Canceled'),
    MERCI_STATUS_DENIED      => t('Denied'),
    MERCI_STATUS_NO_SHOW      => t('No show'),
  );
  drupal_alter('merci_reservation_status_options', &$options);
  return $options;
}

function merci_status_options_list($field, $instance, $entity_type, $entity) {
  return merci_status_allowed_values($field, $instance, $entity_type, $entity);
}

function merci_status_field_formatter_info_alter(&$info) {
  // Let a new field type re-use an existing formatter.
  $info['list_default']['field types'][] = 'merci_reservation_status';
}
 
function merci_status_field_widget_info_alter(&$info) {
  // Let a new field type re-use an existing widget.
  $info['options_select']['field types'][] = 'merci_reservation_status';
}

function merci_status_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function merci_status_permission() {
  return array(
    'create confirmed reservations' => array(
      'title' => t('create confirmed reservations'),
      'description' => t('TODO Add a description for \'create confirmed reservations\''),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function merci_status_node_access($node, $op, $account) {

  return NODE_ACCESS_IGNORE;
  if (is_merci_reservation_node($node)) {

    //users working with their own reservations access reservation
    //additional check in merci_form permission to edit confirmed reservations
    // Users without administer or manage reservations permission can only alter their own Unconfirmed Reservations.
    if (($op == 'delete' or $op == 'update') && isset($node->{MERCI_STATUS_FIELD})){
      if(user_access('create confirmed reservations')) {
        if ($node->{MERCI_STATUS_FIELD}['und'][0]['value'] > MERCI_STATUS_CONFIRMED) {
          return NODE_ACCESS_DENY;
        }
      } elseif ($node->{MERCI_STATUS_FIELD}['und'][0]['value'] != MERCI_STATUS_UNCONFIRMED) {
        return NODE_ACCESS_DENY;
      } 
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_node_operations().
 */
function merci_status_node_operations($return = NULL) {
  $operations = array(
    'merci_status_update' => array(
      'label' => t('Confirm Reservation(s)'),
      'callback' => 'merci_status_update',
    ),
  );
  return $operations;
}

/**
 * Callback function for updating Reservation status from VBO.
 */
function merci_status_update($nodes) {
  foreach ($nodes as $nid) {
    $node = node_load($nid);

    //only update if MERCI Status is Unconfirmed
    if ($node->{MERCI_STATUS_FIELD} == MERCI_STATUS_UNCONFIRMED) {
      $node->{MERCI_STATUS_FIELD} = MERCI_STATUS_PENDING;
      node_save($node);
    }
  }
}

/**
 * Callback function for updating Reservation status.
 */
function merci_confirm_reservation($nid) {
}

/*
 * Amend conflict query to only include conflicts if the reservation status is below MERCI_STATUS_CHECKED_IN
 */
function merci_status_query_merci_resource_alter(QueryAlterableInterface $query) {
  // Storage location for date field.
  $handler = $query->getMetadata('merci_reservable_handler');
  $status_field = $handler->settings['instance']['settings']['behaviors']['merci_status']['status_field'];
  $status_field_info = field_info_field($status_field);
  $status_storage      = $status_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($status_storage);
  $status_table        = reset($keys);
  $status_column  = $status_storage[$status_table]['value'];

  $query->join($status_table, 'status_table', 'item_table.entity_id = status_table.entity_id');
  $query->addField('status_table', $status_column, 'field_status_value');
  $query->condition($status_column, MERCI_STATUS_CHECKED_OUT, '<=');
}

function merci_status_gracetime() {
  $gracetime = NULL;
  return $gracetime;
}

/*
 * Check if $target_id and date field are unique.
 * i.e. Given a $entity of $entity_type with date field $field and entity reference $target_id ...
 * check to ensure no other entities reference the $target_id at the same time.
 */
function merci_status_check_overdue($target_id, $settings, $dates, $exclude_id) {

  $target_field = $settings['target_field'];
  $date_field = $settings['date_field'];
  $status_field = $settings['status_field'];

  $langcode = LANGUAGE_NONE;


  // Storage location for date field.
  $date_field_info = field_info_field($date_field);
  $date_storage      = $date_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($date_storage);
  $date_table        = reset($keys);
  $date_column  = $date_storage[$date_table]['value'];
  $date_column2 = $date_storage[$date_table]['value2'];

  // Storage location for target field.
  $item_field_info = field_info_field($target_field);
  $item_storage      = $item_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($item_storage);
  $item_table        = reset($keys);
  $item_column  = $item_storage[$item_table]['target_id'];


  // Build the query.
  $query = db_select($item_table, 'item_table');
  $query->addField('item_table', 'entity_id', 'entity_id');

  $query->condition($item_column, $target_id);

  // Ignore myself.
  if ($exclude_id) {
    $query->condition('item_table.entity_id', $exclude_id, '!=');
  }

  $query->join($date_table, 'date_table', 'item_table.entity_id = date_table.entity_id');
  $query->addField('date_table', $date_column, 'field_date_value');
  $query->addField('date_table', $date_column2, 'field_date_value2');

  /* reservations in the past ... */
  $query->condition($date_column2, $dates['value'], '<=');

  // Storage location for date field.
  $status_field_info = field_info_field($status_field);
  $status_storage      = $status_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($status_storage);
  $status_table        = reset($keys);
  $status_column  = $status_storage[$status_table]['value'];

  $query->join($status_table, 'status_table', 'item_table.entity_id = status_table.entity_id');
  $query->addField('status_table', $status_column, 'field_status_value');
  $query->condition($status_column, MERCI_STATUS_CHECKED_OUT, '=');
  $query->orderBy($date_column, 'ASC');

  // Return any ids of conflicting reservations if any.
  return ($query->execute()->fetchAllAssoc('entity_id'));
}

