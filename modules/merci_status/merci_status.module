<?php

// Reservation status options.

define('MERCI_STATUS_UNCONFIRMED', 1);
define('MERCI_STATUS_PENDING', 2);
define('MERCI_STATUS_CHECKED_OUT', 3);
define('MERCI_STATUS_CHECKED_IN', 4);
define('MERCI_STATUS_CANCELLED', 5);
define('MERCI_STATUS_DENIED', 6);
define('MERCI_STATUS_NO_SHOW', 7);

define('MERCI_STATUS_FIELD', 'merci_status_field');


/**
 * Implements hook_permission().
 */
function merci_status_permission() {
  return array(
    'create confirmed reservations' => array(
      'title' => t('create confirmed reservations'),
      'description' => t('TODO Add a description for \'create confirmed reservations\''),
    ),
  );
}

function merci_status_gracetime() {
  $gracetime = NULL;
  return $gracetime;
}

/*
 * Amend conflict query to only include conflicts if the reservation status is below MERCI_STATUS_CHECKED_IN
 */
function merci_status_query_merci_resource_alter(QueryAlterableInterface $query) {
  // Storage location for date field.
  $status_field = MERCI_STATUS_FIELD;
  $status_field_info = field_info_field($status_field);
  $status_storage      = $status_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($status_storage);
  $status_table        = reset($keys);
  $status_column  = $status_storage[$status_table]['value'];

  $query->join($status_table, 'status_table', 'item_table.entity_id = status_table.entity_id');
  $query->addField('status_table', $status_column, 'field_status_value');
  $query->condition($status_column, MERCI_STATUS_CHECKED_OUT, '<=');
  $conditions = $query->conditions();
}

function merci_status_merci_generic_items_validate($handler, &$errors) {

  $query = merci_status_overdue_query($handler);

  $reservations = $query->execute()->fetchAllAssoc('target_id');

  $context    = $handler->context;

  foreach ($handler->targets as $delta => $target) {
    if (array_key_exists($target['target_id'], $reservations)) {
      $errors[$context['field']['field_name']][$context['langcode']][$delta][] = array(
        'error' => 'merci',
        'message' => t("Item is past due"),
      );
    }
  }
}

/*
 * Check if $target_id and date field are unique.
 * i.e. Given a $entity of $entity_type with date field $field and entity reference $target_id ...
 * check to ensure no other entities reference the $target_id at the same time.
 */
function merci_status_overdue_query($target_type, $entity, $date_field, $target_field) {
  $target_ids = array();
  foreach ($handler->targets as $delta => $item) {
    if ($item['target_id']) {
      $target_ids[] = $item['target_id'];
    }
  }
  $context    = $handler->context;
  $exclude_id = $handler->entity_id;
  $dates      = $handler->dates;

  $target_field = $context['target_field'];
  $date_field   = $context['date_field'];
  $status_field = $context['status_field'];
  $gracetime    = $context['overdue_gracetime'];

  $date_start   = $dates['value'];

  $gracetime = "+1day";

  if ($gracetime) {
    $date_start = date('Y-m-d H:i:s', strtotime($dates['value'] . ' ' . $gracetime));
  }

  // Storage location for date field.
  $date_field_info = field_info_field($date_field);
  $date_storage      = $date_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($date_storage);
  $date_table        = reset($keys);
  $date_column  = $date_storage[$date_table]['value'];
  $date_column2 = $date_storage[$date_table]['value2'];

  // Storage location for target field.
  $item_field_info = field_info_field($target_field);
  $item_storage      = $item_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($item_storage);
  $item_table        = reset($keys);
  $item_column  = $item_storage[$item_table]['target_id'];


  // Build the query.
  $query = db_select($item_table, 'item_table');
  $query->addField('item_table', $item_column, 'target_id');

  if (count($target_ids) > 1) {
    $query->condition($item_column, $target_ids, 'IN');
  } else {
    $query->condition($item_column, reset($target_ids));
  }

  // Ignore myself.
  if ($exclude_id) {
    $query->condition('item_table.entity_id', $exclude_id, '!=');
  }

  $query->join($date_table, 'date_table', 'item_table.entity_id = date_table.entity_id');
  $query->addField('date_table', $date_column, 'field_date_value');
  $query->addField('date_table', $date_column2, 'field_date_value2');

  /* reservations in the past ... */
  $query->condition($date_column2, $date_start, '<=');

  // Storage location for date field.
  $status_field_info = field_info_field($status_field);
  $status_storage      = $status_field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $keys = array_keys($status_storage);
  $status_table        = reset($keys);
  $status_column  = $status_storage[$status_table]['value'];

  $query->join($status_table, 'status_table', 'item_table.entity_id = status_table.entity_id');
  $query->addField('status_table', $status_column, 'field_status_value');
  $query->condition($status_column, MERCI_STATUS_CHECKED_OUT, '=');
  $query->orderBy($date_column, 'ASC');

  // Return any ids of conflicting reservations if any.
  return $query;
}

