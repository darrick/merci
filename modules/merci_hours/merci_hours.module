<?php

define('MERCI_HOURS_FIELD', 'field_office_hours');
define('MERCI_HOLIDAYS_FIELD', 'field_holidays');
module_load_include('inc', 'merci_hours', 'open_hours.element');

/**
 * Implements hook_permission().
 */
function merci_hours_permission() {
  $perms = array();
  $perms['administer all merci hours'] = array(
    'title' => t('Administer all merci hours'),
    'description' => t('Perform all administration tasks for merci hours.'),
  );

  $perms['edit own merci hours'] = array(
    'title' => t('Edit own merci hours'),
    'description' => t('Perform tasks for own merci hours.'),
  );

  $perms['delete own merci hours'] = array(
    'title' => t('Delete own mecri hours'),
    'description' => t('Perform tasks for own merci hours.'),
  );

  $perms['create own merci hours'] = array(
    'title' => t('Create own merci hours'),
    'description' => t('Perform tasks for own merci hours.'),
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function merci_hours_menu() {
  $items = array();
  $items['admin/config/merci/merci-hours/settings'] = array(
    'title' => 'Sitewide merci hours',
    'description' => "Site's default merci hours.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merci_hours_sitewide_settings'),
    'access arguments' => array('administer MERCI'),
    'access callback' => 'user_access',
    'file' => 'merci_hours.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  $items['merci_hours_dates/%/%/%'] = array(
    'page callback' => 'merci_hours_date_open_days_ajax',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
  );
  $items['merci_hours_open/%/%'] = array(
    'page callback' => 'merci_hours_open_hours_ajax',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function merci_hours_entity_info() {
  $info = array();
  $info['merci_hours'] = array(
    'module' => 'merci_hours',
    'base table' => 'merci_hours',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'merci_hours' => array(

        'label' => t('Merci hours'),
        // Provide a default administration path for Field UI, but not if 'admin'
        // has been explicitly set to NULL.
        'admin' => array(
          'path' => 'admin/config/merci/merci-hours',
        )
      )
    ),
    'label' => t('Merci hours'),
    'plural label' => t('Merci hours'),
    'entity class' => 'MerciHours',
    'controller class' => 'EntityAPIControllerExportable',
    'exportable' => TRUE,
    'admin ui' => array(
      'path' => 'admin/config/merci/merci-hours',
      'file' => 'includes/entity.ui.inc',
    ),
    'access callback' => 'merci_hours_access',
  );
  return $info;
}

/**
 * Implements access callback.
 */
function merci_hours_access($op, $entity = NULL, $account = NULL) {
  switch ($op) {
    //case 'view':
    //case 'update':
    //case 'create':
    //case 'edit':
    case 'delete':
      $default = variable_get('merci_hours_default', NULL);
      if ($entity->name == $default) {
        drupal_set_message(t("This is the default merci hours and can't be deleted. Please change the default merci hours at <a href='!url'>admin/config/merci/merci-hours/settings</a> if you want to delete this one.", array('!url' => url('admin/config/merci/merci-hours/settings'))), 'error');
          return false;
      }
      break;
  }
  return user_access('administer all merci hours');
}

/**
 * Returns all merci hours indexed by name, or just the one requested.
 *
 * Used by machine name existence check
 * also useful for menu path wildcard loader.
 */
function merci_hours_load($name = NULL) {
  $wc = entity_load_multiple_by_name('merci_hours', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($wc) : $wc;
}

/**
 * Returns a merci hours selection form element.
 *
 * @param boolean include_default wether to add "use site default" as an option.
 * @param integer default_value Id of the default merci hours.
 *
 * @return form element.
 */
function merci_hours_form_element($include_default = FALSE, $default_value = NULL) {
  $options = array();
  if ($include_default && variable_get('merci_hours_default', FALSE)) {
    $options[0] = t('-- use site default --');
  }
  $options += db_select('merci_hours', 'wc')
    ->fields('wc', array('name', 'label'))
    ->execute()
    ->fetchAllKeyed(0, 1);
  $element = array(
    '#type' => 'select',
    '#title' => t('Choose merci hours'),
    '#default_value' => $default_value,
    '#options' => $options,
  );
  return $element;
}

/**
 * Implementation of hook_form_alter().
 */
function merci_hours_form_merci_hours_form_alter(&$form, &$form_state) {
//  field_attach_form('merci_hours', $form_state['merci_hours'], $form, $form_state);
}

/**
 * Page callback. Returns json array for ajax calls.
 */
function merci_hours_open_days_ajax($wc, $year, $month) {
  $dates = merci_hours_get_open_days_in_month($wc, $year, $month);
   drupal_json_output($dates);
}

/**
 * Page callback. Returns json array for ajax calls.
 */
function merci_hours_open_hours_ajax($wc, $day) {
  $hours = merci_hours_get_open_hours($wc, $day);
   drupal_json_output($hours);
}
/**
 * @defgroup wc_date_field_settings Hooks to extend date field settings.
 * {@
 * Adds work calendar settings to date fields.
 */

/**
 * Implements hook_field_info_alter().
 *
 * Extends instance settings of date fields with work calendar defaults.
 */
function merci_hours_field_info_alter(&$info) {
  $settings = array(
    'merci_hours' => array(
      'enabled' => FALSE,
      'id' => NULL,
      'min_date' => NULL,
      'max_date' => NULL,
    ),
  );
  $fields = array('datetime');
  foreach ($fields as $field) {
    $info[$field]['instance_settings'] += $settings;
  }
}

/**
 * Implements hook_date_field_instance_settings_form_alter().
 *
 * Adds elements to instance settings form of date fields to configure
 * work calendar settings.
 */
function merci_hours_date_field_instance_settings_form_alter(&$form, $context) {
  $settings = $context['instance']['settings'];
  $form['merci_hours'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => 'Merci hours',
    '#fieldset' => 'defaults',
  );
  $form['merci_hours']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict dates based on Merci hours.'),
    '#default_value' => $settings['merci_hours']['enabled'],
  );
  $form['merci_hours']['id'] = merci_hours_form_element(TRUE, $settings['merci_hours']['id']);
  $form['merci_hours']['id']['#states'] = array(
    'enabled' => array(
      ':input[name="instance[settings][merci_hours][enabled]"]' => array('checked' => TRUE),
    ),
  );
  $form['merci_hours']['min_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum date'),
    '#description' => t('Relative date a reservation can be made; valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today. "-1d" represents one day before today.'),
    '#default_value' => $settings['merci_hours']['max_date'],
  ); 
  $form['merci_hours']['max_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum date'),
    '#description' => t('Relative date a reservation can be made; valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today. "-1d" represents one day before today.'),
    '#default_value' => $settings['merci_hours']['max_date'],
  ); 
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * For date fields with work calendar settings,
 * pass the configuration into the (date_combo) element.
 *
 * We are copying settings from instance settings to leaf form
 * elements in cascade, since we are implementing direct integration
 * with form api via #merci_hours property.
 *
 * @see hook_date_combo_process_alter()
 */
function merci_hours_field_widget_form_alter(&$element, &$form_state, $context) {
  if (in_array($context['field']['type'], array('datetime')) && ($context['instance']['settings']['merci_hours']['enabled'])) {
    $element['#merci_hours'] = $context['instance']['settings']['merci_hours']['id'];
    $element['#min_date'] = $context['instance']['settings']['merci_hours']['min_date'];
    $element['#max_date'] = $context['instance']['settings']['merci_hours']['max_date'];
  }
}


/**
 * Implements hook_date_combo_process_alter().
 *
 * If element defines #work_calendar, pass it to inner elements.
 *
 * @see work_calendar_date_date_text_process_alter()
 * @see work_calendar_date_date_select_process_alter()
 * @see work_calendar_date_date_popup_process_alter()
 */
function merci_hours_date_combo_process_alter(&$element, $form_state, $context) {
  if (isset($element['#merci_hours'])) {
    $element['value']['#merci_hours'] = $element['#merci_hours'];
    $element['value']['#min_date'] = $element['#min_date'];
    $element['value']['#max_date'] = $element['#max_date'];
    if (isset($element['value2'])) {
      $element['value2']['#merci_hours'] = $element['#merci_hours'];
      $element['value2']['#min_date'] = $element['#min_date'];
      $element['value2']['#max_date'] = $element['#max_date'];
    }
  }
}

/**
 * Implements hook_date_popup_process_alter().
 *
 * This function perform two tasks:
 *   - adds an extra validation callback if a work calendar is set
 *   - adds javascript settings to control the available days in the popup.
 */
function merci_hours_date_popup_process_alter(&$element, $form_state, $context) {
  if (isset($element['#merci_hours'])) {
    $element['#element_validate'][] = 'merci_hours_date_element_validate';

    // Current year. TODO: extend to a dinamic ajax callback.
    // Limit selectable days based on days open.
    $element['date']['#attributes']['class'][] = 'merci-hours-date-popup';
    $id = $element['date']['#id'];
    $settings = array(
      $id => array(
        'settings' => array(
          'workCalendar' => $element['#merci_hours'],
          'openDays' => merci_hours_get_open_days_in_year($element['#merci_hours']),
          'minDate' => $element['#min_date'],
          'maxDate' => $element['#max_date'],
          'timeid' => $element['time']['#id'],
        ),
      ),
    );
    drupal_add_js(array('datePopup' => $settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'merci_hours') . '/merci_hours_date_popup.js');


    // Limit selectable times based on hours open.
    $return_id = $element['time']['#id'];

    $open_hours = merci_hours_get_open_hours($element['#merci_hours'],4);

    $element['time']['#attributes']['class'][] = 'merci-hours-timefield';

    $settings = array(
      'minTime'   => $open_hours['open'],
      'maxTime'   => $open_hours['close'],
      'dateid' => $element['date']['#id'],
      'workCalendar' => $element['#merci_hours'],
    );

    if (empty($element['time']['#value'])) {
      $element['time']['#value'] = $open_hours['open'];
    }
    $js_settings['datePopup'][$return_id] = array(
      'settings' => $settings,
    );
    drupal_add_js($js_settings, 'setting');
  }
}

/**
 * Page callback. Returns json array for ajax calls.
 */
function merci_hours_date_open_days_ajax($wc, $year, $month) {
  $dates = merci_hours_get_open_days_in_month($wc, $year, $month);
   drupal_json_output($dates);
}

/**
 * Validate callback for date form elements with #work_calendar.
 *
 * Check the date is a open day in the in the work calendar.
 */
function merci_hours_date_element_validate($element, &$form_state, $form) {
  //if (form_get_errors()) return;

  $cal = $element['#merci_hours'];
  $value = $element['#value'];

  $date = new DateObject(implode(' ', $value));
  $valid = merci_hours_day_is_open($element['#merci_hours'], $date->format('Y'), $date->format('m'), $date->format('d'));
  $holiday = merci_hours_day_is_holiday($element['#merci_hours'], $date);

  if (!$valid) {
    form_error($element, t('This is a closed day in the work calendar.'));
  }
  else if ($holiday) {
    form_error($element, t('This is a holiday in the work calendar.'));
  } else {
    $day = $date->format('w');
    $time = $date->format('H:i:s');
    $open_hours = merci_hours_get_open_hours_for_day($cal, $day);
    foreach ($open_hours[$day] as $hours) {
      $open = $hours['open'];
      $close = $hours['close'];
      $open_hour = $open->format('H:i:s');
      $close_hour = $close->format('H:i:s');
      if ($time < $open_hour) {
        form_error($element, t('We are closed until %open on %day.', array('%open' => $open->format('g:ia'), '%day' => $open->format('l'))));
      }
      if ($time > $close_hour) {
        form_error($element, t('We close at %close on %day.', array('%close' => $close->format('g:ia'), '%day' => $close->format('l'))));
      }
    }
  }
}

function merci_hours_day_is_holiday($cal, $date) {
  $wc = merci_hours_instantiate($cal);
  $holidays = $wc->getHolidayDates($date->format('Y'), $date->format('m'), $date->format('d'));
  return count($holidays);
}

/**
  *  * Wrapper for WorkCalendar::isOpenDay().
  *   */
function merci_hours_day_is_open($cal = NULL, $year = NULL, $month = NULL, $day = NULL) {
  $wc = merci_hours_instantiate($cal);
  list($year, $month, $day) = merci_hours_complete_date($year, $month, $day);
  return $wc->isOpenDay($year, $month, $day);
}
/**
 * Implements hook_merci_fields_info().
 */
function merci_hours_merci_fields_info() {
  $fields = array();

  // Exported field_base: 'field_office_hours'
  $fields[MERCI_HOURS_FIELD] = array(
    'field' => array(
      'cardinality' => -1,
      'field_name' => MERCI_HOURS_FIELD,
      'type' => 'datetime',
      'settings' => array(
        'todate' => 'required',
        'tz_handling' => 'none',
      ),
    ),
    'instance' => array(
      'label' => 'Office hours',
      'required' => 0,
      'widget' => array(
        'module' => 'merci_hours',
        'type' => 'merci_hours',
      ),
    ),
  );
  $fields[MERCI_HOLIDAYS_FIELD] = array(
    'field' => array(
      'field_name' => MERCI_HOLIDAYS_FIELD,
      'module' => 'viewfield',
      'type' => 'viewfield',
    ),
    'instance' => array(
      'label' => 'Holidays',
    ),
  );
  return $fields;
}

/**
 * Load the requested calendar or site's default if none given.
 */
function merci_hours_instantiate($name = NULL) {
  if (empty($name)) {
    $name = variable_get('merci_hours_default');
    if (empty($name)) {
      throw new Exception('Default merci hours not configured.');
    }
  }
  $wc = entity_load_single('merci_hours', $name);
  if (!$wc) {
    throw new Exception($name . ' merci hours doesn\'t exist.');
  }
  $week_days = array();
  $weekdays = date_week_days_untranslated(); 
  foreach ($wc->{MERCI_HOURS_FIELD}[LANGUAGE_NONE] as $timefield) {
    $open = new DateObject($timefield['value']);
    $day = $open->format('w');
    $week_days[] = $weekdays[$day];

  }
  $wc->updateWeek($week_days);
  return $wc;
}

/**
 * Complete empty date parts with today values.
 */
function merci_hours_complete_date($year, $month = NULL, $day = NULL) {
  $year = is_null($year)?date('Y'):$year;
  $month = is_null($month)?date('m'):$month;
  $day = is_null($day)?date('d'):$day;
  return array($year, $month, $day);
}

/**
 * Wrapper for WorkCalendar::openDays().
 */
function merci_hours_get_open_days_in_year($cal = NULL, $year = NULL) {
  $wc = merci_hours_instantiate($cal);
  list($year,,) = merci_hours_complete_date($year);
  $dates = $wc->getOpenDays($year);

  $holidays = $wc->getHolidayDates($year);

  return array_values( array_diff($dates, $holidays));
}

/**
 * Wrapper for WorkCalendar::openDays().
 */
function merci_hours_get_open_days_in_month($cal = NULL, $year = NULL, $month = NULL) {
  $wc = merci_hours_instantiate($cal);
  list($year, $month, ) = merci_hours_complete_date($year, $month);
  $dates = $wc->getOpenDays($year, $month);

  $holidays = $wc->getHolidayDates($year, $month);

  return array_values( array_diff($dates, $holidays));
}

function merci_hours_get_open_hours_for_day($cal, $day) {
  $wc = merci_hours_instantiate($cal);

  $hours = array();
  //$day = $day ? $day : $wc->field_merci_hours_of_operation[LANGUAGE_NONE][0]['day'];
  foreach ($wc->{MERCI_HOURS_FIELD}[LANGUAGE_NONE] as $timefield) {
    $open = new DateObject($timefield['value']);
    if ($day == $open->format('w')) {
      $close = new DateObject($timefield['value2']);
      if (array_key_exists($day, $hours)) {
        $hours[$day] = array();
      }
      $hours[$day][] = array(
        'open' => $open,
        'close' => $close,
      );
    }
  }
  return $hours;
}

function merci_hours_get_open_hours($cal = NULL, $day = NULL) {
  $wc = merci_hours_instantiate($cal);
  if ($day === NULL) {
    $open = new DateObject($wc->{MERCI_HOURS_FIELD}[LANGUAGE_NONE][0]);
    $day = $open->format('w');
  }

  //$day = $day ? $day : $wc->field_merci_hours_of_operation[LANGUAGE_NONE][0]['day'];
  foreach ($wc->{MERCI_HOURS_FIELD}[LANGUAGE_NONE] as $timefield) {
    $open = new DateObject($timefield['value']);
    if ($day == $open->format('w')) {
      $close = new DateObject($timefield['value2']);
      break;
    }
  }
  if (!isset($close)) {
    return array('open' => '', 'close' => '');
  }
  return array('open' => $open->format('g:ia'), 'close' => $close->format('g:ia'));
}
