<?php

define('MERCI_HOURS_FIELD', 'field_merci_hours');
define('MERCI_HOURS', 'merci_hours');

/**
 * Implementation of hook_form_alter().
 */
function merci_hours_form_node_type_form_alter(&$form, &$form_state) {
  
  // Node add/edit forms.

  $description_items = array(
    MERCI_HOURS => t('Use this content type to hours of operation for MERCI.'),
  );
  $form['merci']['merci_type_setting']['#options'][MERCI_HOURS] = t('MERCI Office Hours');
  $form['merci']['merci_type_setting']['#description_items'] += $description_items;
}

/**
 * Add group and group content fields to new content types.
 *
 * @param $bundle_name
 *   The content type name.
 */
function merci_hours_merci_node_type_save($bundle_name) {
  if (variable_get('merci_type_setting_' . $bundle_name, 'disabled') == MERCI_HOURS) {
    merci_create_field(MERCI_HOURS_FIELD, 'node', $bundle_name);
  }
}

function merci_hours_field_attach_validate($entity_type, $entity, &$errors) {
  dpm($entity);
  dpm($entity_type);
  dpm($errors);
}
function merci_hours_form_alter(&$form, &$form_state, $form_id) {
  /*
  if (isset($form[MERCI_RESERVATION_DATE_FIELD])) {
    dpm($form);
    dpm($form_id);
    $langcode = 'und';
    //$form[MERCI_RESERVATION_DATE_FIELD][$langcode][0]['#element_validate'][] = 'merci_hours_date_validate';
    $form['#validate'][] = 'merci_hours_date_validate';
  }
   */
}

function merci_hours_date_validate($form, &$form_state) {
  dpm($form);
  dpm($form_state);
  form_set_error(MERCI_RESERVATION_DATE_FIELD, t('This field is required.'));
}

/**
 * Implementation of hook_node_validate().
 */
function merci_hours_node_validate($node, $form, &$form_state) {

  if (is_merci_reservation_node($node)) {

    if (!empty($form_state['ahah_submission'])) {
      return;
    }

    // No validation necessary on deletion.
    if ($form_state['triggering_element']['#id'] == 'edit-delete') {
      return;
    }

    $entity_type = 'node';
    $merci_settings = merci_settings_load($entity_type, $node->type);
    $target_field = $merci_settings['target_field'];
    $date_field = $merci_settings['date_field'];
    $langcode = $node->language;
    $items = $node->{$target_field}[$langcode];

    $errors = array();

    merci_bucket_merci_validate_items($entity_type, $node, $date_field, $target_field, $items, &$errors);

    if (count($errors)) {
      foreach ($errors[$target_field][$langcode] as $delta => $error) {
        //$errors[$target_field][$langcode][$delta][] = array(
        foreach($error as $error_message){
          $messages[] = $error_message['message'];
        }
        form_set_error("$target_field][$langcode][$delta][target_id", implode('<br>', $messages)); 
      }
    }
  }
}

function merci_hours_merci_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  $field_date_name = $field['settings']['handler_settings']['behaviors']['merci']['merci']['merci_date_field'];

  if (!property_exists($entity, $field_date_name)) {
    return;
  }
  foreach ($items as $delta => $item) {
    $entity_ids[] = $item['target_id'];
  }
  $entity_items = entity_load($instance['entity_type'], $entity_ids);

  $settings = $field['settings']['handler_settings']['behaviors']['merci']['merci_hours'];
  $merci_time_reference_field_name = $settings['merci_time_reference_field'];
  $merci_time_field_name            = $settings['merci_time_field'];

  $date_field_info = field_info_field($field_date_name);
  $timezone_db = date_get_timezone_db($date_field_info['settings']['tz_handling']);
  $date_field = $entity->{$field_date_name}[$langcode][0];
  $start_date     = new DateObject($date_field['value'], $timezone_db);//, DATE_FORMAT_DATETIME);
  $end_date       = new DateObject($date_field['value2'], $timezone_db);//, DATE_FORMAT_DATETIME);
  $start_date->setTimezone(timezone_open($date_field['timezone']));
  $end_date->setTimezone(timezone_open($date_field['timezone']));
  $start_seconds  = $start_date->format('H')  * 3600 + $start_date->format('i') * 60 + $start_date->format('s');
  $end_date->setTimezone(timezone_open($date_field['timezone']));
  $end_seconds    = $end_date->format('H')    * 3600 + $end_date->format('i')   * 60 + $end_date->format('s');

  $start_weekday      = strtolower($start_date->format('D'));
  $end_weekday        = strtolower($end_date->format('D'));

  foreach ($items as $delta => $item) {
    $item_entity = $entity_items[$item['target_id']];
    $instance_info = field_info_instance($instance['entity_type'], $merci_time_reference_field_name, $item_entity->type);

    foreach ($item_entity->{$merci_time_reference_field_name}[$langcode] as $hours) {
      $hour_entities = entity_load($instance_info['entity_type'], array($hours['target_id']));
      $valid_start = false;
      $valid_end   = false;
      foreach ($hour_entities as $hour_id => $hour_entity) {
        foreach ($hour_entity->{$merci_time_field_name}[$langcode] as $timefield) {
          if ($timefield['value'] <= $start_seconds 
            and $timefield['value2'] >= $start_seconds 
            and $timefield[$start_weekday] == 1) {
              // Start falls at a time we are open.
              $valid_start = true;
            }
          if ($timefield['value'] <= $end_seconds 
            and $timefield['value2'] >= $end_seconds 
            and $timefield[$end_weekday] == 1) {
              // End falls at a time we are open.
              $valid_end = true;
            }
        }
        if (!$valid_start) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'merci_hours',
            'message' => t('%name: Start time is out of bounds.', array('%name' => $instance['label'])),
          );
        }
        if (!$valid_end) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'merci_hours',
            'message' => t('%name: End time is out of bounds.', array('%name' => $instance['label'])),
          );
        }
      }

    }
  }

  return;
}

function merci_hours_merci_settings_form($field, $instance, &$form) {
  /**
   * get all date fields on the site organized by entity and bundle
   */
  $fields_info = field_info_instances();

  /**
   * get all date fields on the site organized by entity and bundle
   */
  $reference_fields = array('disabled' => t('Disabled'));

  $time_fields = array('disabled' => t('Disabled'));
  foreach ($fields_info as $type => $bundles) {
    foreach ($bundles as $name => $bundle) {
      foreach ($bundle as $field_name => $field_info) {
        $more_info = field_info_field($field_name);
        if ( $more_info['type'] == 'timefield') {
          $time_fields[$field_name] = $field_info['label'];
        }
        if ( $more_info['type'] == 'entityreference') {
          $reference_fields[$field_name] = $field_info['label'];
        }
      }
    }
  }

  $settings = $field['settings']['handler_settings']['behaviors']['merci']['merci_hours'];
  $default_value = array_key_exists('merci_time_field', $settings) ? $settings['merci_time_field'] : 'disabled';

  $form['merci_hours'] = array(
    '#type' => 'fieldset',
    '#title' => t('Merci hours'),
    '#collapsible' => TRUE,
    '#collapsed' => $default_value == 'disabled' ? true : false, 
  );
  if (empty($time_fields)) {
    $form['merci_hours']['merci_time_field'] = array(
      '#markup' => t('Please add a time field to a entity to use to filter reservations.')
    );
  } else {


    $form['merci_hours']['merci_time_field'] = array(
      '#type' => 'select',
      '#title' => t('Time field'),
      '#options' => $time_fields,
      '#default_value' => $default_value,
      '#description' => t('Select the time field to use to limit reservations of this entity field.'),
    );
  }

  $default_value = array_key_exists('merci_time_reference_field', $settings) ? $settings['merci_time_reference_field'] : 'disabled';
  if (empty($reference_fields)) {
    $form['merci_hours']['merci_time_reference_field'] = array(
      '#markup' => t('Please add a entityreference field to the user entity to use to filter reservations by permission.')
    );
  } else {


    $form['merci_hours']['merci_time_reference_field'] = array(
      '#type' => 'select',
      '#title' => t('Time reference field'),
      '#options' => $reference_fields,
      '#default_value' => $default_value,
      '#description' => t('Select the entityreference field to use to limit reservations of this entity field.'),
    );
  }
}

/**
 * Implements hook_merci_fields_info().
 */
function merci_hours_merci_fields_info() {
  $fields = array();

  $fields[MERCI_HOURS_FIELD] = array(
    'field' => array(
      'active' => '1',
      'cardinality' => '-1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => MERCI_HOURS_FIELD,
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => '0',
      'module' => 'office_hours',
      'settings' => array(
        'cardinality' => '2',
        'granularity' => '60',
        'hoursformat' => '1',
        'limitend' => '22',
        'limitstart' => '8',
        'valhrs' => 0,
      ),
      'translatable' => '0',
      'type' => 'office_hours',
    ),
    'instance' => array(
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'office_hours',
          'settings' => array(
            'closedformat' => 'Closed',
            'compress' => FALSE,
            'current_status' => array(
              'closed_text' => 'Currently closed',
              'open_text' => 'Currently open!',
              'position' => 'hide',
            ),
            'date_first_day' => '0',
            'daysformat' => 'long',
            'grouped' => FALSE,
            'hoursformat' => 0,
            'separator_day_hours' => ': ',
            'separator_days' => '<br />',
            'separator_grouped_days' => ' - ',
            'separator_hours_hours' => '-',
            'separator_more_hours' => ', ',
            'showclosed' => 'all',
            'timezone_field' => '',
          ),
          'type' => 'office_hours',
          'weight' => 1,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'label' => 'Hours of operation',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'office_hours',
        'settings' => array(),
        'type' => 'office_hours',
        'weight' => '-3',
      ),
    ),
  );


  return $fields;
}
