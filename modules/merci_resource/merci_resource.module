<?php

module_load_include('inc', 'merci', 'merci.validate');

define('MERCI_RESOURCE', 'resource');
/**
 * Implementation of hook_form_alter().
 */
function merci_resource_form_node_type_form_alter(&$form, &$form_state) {

  // Node add/edit forms.

  $description_items = array(
    MERCI_RESOURCE => t('Use this content type to create unique items that can be reserved.'),
  );

  $form['merci']['merci_type_setting']['#options']['resource'] = t('Resource');
  $form['merci']['merci_type_setting']['#description_items'] += $description_items;
}

function merci_resource_field_attach_validate($entity_type, $entity, &$errors) {
  return;
  if (is_merci_reservation_node($entity)) {

    $merci = merci_settings_load($entity_type, $entity);
    $target_field = $merci['settings']['target_field'];
    $date_field = $merci['settings']['date_field'];
    $items = merci_api_extract_item_values($entity_type, $entity);

    merci_resource_merci_validate_items($entity_type, $entity, $items, &$errors);
  }
}

/**
 * Implements hook_node_access().
 */
function merci_resource_node_access($node, $op, $account) {
  global $user;

  $type = isset($node->type) ? $node->type : $node;
  $uid = isset($node->uid) ? $node->uid : FALSE;

  dpm(content_access_node_access_records($node));
  if (in_array($op, array('update', 'delete', 'create'))) {
    if (merci_type_setting($node) != MERCI_RESOURCE) {
      if (node_node_access($node, $op, $account) == NODE_ACCESS_IGNORE) {
  //      return NODE_ACCESS_DENY;
      }
    }
  }
}

function merci_resource_merci_validate_items_old($entity_type, $entity, $items, &$errors) {

  $merci = merci_settings_load($entity_type, $entity);
  $target_field = $merci['settings']['target_field'];
  $date_field = $merci['settings']['date_field'];

  foreach ($items as $delta => $item) {
    if (!$item['target_id']) {
      unset($items[$delta]);
    }
  }
  unset($items['add_more']);

  $target_field_info = field_read_field($target_field);
  $target_type = $target_field_info['settings']['target_type'];
  $langcode = $entity ? $entity->language : LANGUAGE_NONE;
  $selected_count = array();
  $inventory_count = array();

  foreach ($items as $delta => $item) {
    $target_id = $item['target_id'];
    $entities = entity_load($target_type, array($target_id));
    $node = reset($entities);
    if (merci_type_setting($node) != MERCI_RESOURCE) {
      continue;
    }

    // Check availability
    $conflicts = merci_api_check_item_conflicts($entity_type, $entity, $target_id);
    if (!empty($conflicts)) {
      $entities = entity_load($target_type, array($target_id));
      $item_entity = reset($entities);
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t('%name: conflict with one or more existing reservations.', array('%name' => $item_entity->title)),
      );
    }
    // Check too many.
    $selected_count[$target_id] = isset($selected_count[$target_id]) ? $selected_count[$target_id] + 1 : 1;
    if ( ! isset($inventory_count[$target_id])) { 
      $inventory_count[$target_id]       = merci_api_get_item_count($target_id); 
    }
    if ($selected_count[$target_id] > $inventory_count[$target_id]) {
      $entities = entity_load($target_type, array($target_id));
      $item_entity = reset($entities);
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t("You've selected too many %name's.  We only have %amount in the current inventory.", 
        array('%name' => $item_entity->title, '%amount' => $inventory_count[$target_id])),
      );
      continue;
    }
  }
}

function merci_resource_merci_validate_items($entity_type, $entity, $items, &$errors) {

  $preset = merci_settings_load($entity_type, $entity);
  $target_field = $preset['settings']['target_field'];
  $date_field = $preset['settings']['date_field'];

  foreach ($items as $delta => $item) {
    if (!$item['target_id']) {
      unset($items[$delta]);
    }
  }
  unset($items['add_more']);

  $target_field_info = field_read_field($target_field);
  $target_type = $target_field_info['settings']['target_type'];
  $langcode = $entity ? $entity->language : LANGUAGE_NONE;
  $selected_count = array();
  $inventory_count = array();

  if(!property_exists($entity, $date_field)) {
    return;
  }
  $dates = $entity->{$date_field}[$langcode][0];

  foreach ($items as $delta => $item) {
    $target_id = $item['target_id'];
    $entities = entity_load($target_type, array($target_id));
    $node = reset($entities);
    if (merci_type_setting($node) != MERCI_RESOURCE) {
      continue;
    }
    
    $handler = Merci_ReservableHandler_Generic::getInstance($target_type, $node, $preset); 

    // Check availability
    $reservations = $handler->reservations($dates);
    dpm($reservations);
    if (!empty($reservations)) {
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t('%name: conflict with one or more existing reservations.', array('%name' => $node->title)),
      );
    }
    // Check too many.
    $selected_count[$target_id] = isset($selected_count[$target_id]) ? $selected_count[$target_id] + 1 : 1;
    if ( ! isset($inventory_count[$target_id])) { 
      $inventory_count[$target_id]       = $handler->itemCount(); 
    }
    if ($selected_count[$target_id] > $inventory_count[$target_id]) {
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t("You've selected too many %name's.  We only have %amount in the current inventory.", 
        array('%name' => $node->title, '%amount' => $inventory_count[$target_id])),
      );
      continue;
    }
  }
}

