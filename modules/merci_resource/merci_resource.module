<?php

module_load_include('inc', 'merci', 'merci.validate');

/**
 * Implementation of hook_form_alter().
 */
function merci_resource_form_alter(&$form, &$form_state, $form_id) {
  
  // Node add/edit forms.

  if($form_id == 'node_type_form') {
    $form['merci']['merci_type_setting']['#options']['resource'] = t('Resource');
  }
}

/**
 * Implementation of hook_node_validate().
 */
function merci_resource_node_validate($node, $form, &$form_state) {

  if (is_merci_reservation_node($node)) {

    if (!empty($form_state['ahah_submission'])) {
      return;
    }

    // No validation necessary on deletion.
    if ($form_state['triggering_element']['#id'] == 'edit-delete') {
      return;
    }

    // Do no validation if their errors from the main validation function.
    if (form_get_errors()) {
      return;
    }

    $entity_type = 'node';
    $merci_settings = merci_settings_load($entity_type, $node->type);
    $target_field = $merci_settings['target_field'];
    $date_field = $merci_settings['date_field'];
    $langcode = $node->language;
    $items = $node->{$target_field}[$langcode];

    $errors = array();

    merci_resource_merci_validate_items($entity_type, $node, $date_field, $target_field, $items, &$errors);

    if (count($errors)) {
      foreach ($errors[$target_field][$langcode] as $delta => $error) {
        //$errors[$target_field][$langcode][$delta][] = array(
        foreach($error as $error_message){
          $messages[] = $error_message['message'];
        }
        form_set_error("$target_field][$langcode][$delta][target_id", implode('<br>', $messages)); 
      }
    }


    //merci_validate_status($form, $form_state);
    //merci_validate_merci_reservation_date($form, $form_state);

    // Tests for existing items.
    //merci_validate_empty_reservation_items($form, $form_state);
    //merci_validate_merci_selected_items($form, $form_state);
  }
}

function merci_resource_merci_validate_items($entity_type, $entity, $date_field, $target_field, $items, &$errors) {

  foreach ($items as $delta => $item) {
    if (!$item['target_id']) {
      unset($items[$delta]);
    }
  }
  unset($items['add_more']);

  $target_field_info = field_read_field($target_field);
  $target_type = $target_field_info['settings']['target_type'];
  $langcode = $entity ? $entity->language : LANGUAGE_NONE;
  $selected_count = array();
  $inventory_count = array();

  foreach ($items as $delta => $item) {
    $target_id = $item['target_id'];
    $entities = entity_load($target_type, array($target_id));
    $node = reset($entities);
    if (merci_type_setting($node) != 'resource') {
      continue;
    }

    // Check availability
    $conflicts = merci_api_check_item_conflicts($entity_type, $entity, $date_field, $target_field, $target_id);
    if (!empty($conflicts)) {
      $entities = entity_load($target_type, array($target_id));
      $item_entity = reset($entities);
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t('%name: conflict with one or more existing reservations.', array('%name' => $item_entity->title)),
      );
    }
    // Check too many.
    $selected_count[$target_id] = isset($selected_count[$target_id]) ? $selected_count[$target_id] + 1 : 1;
    if ( ! isset($inventory_count[$target_id])) { 
      $inventory_count[$target_id]       = merci_api_get_item_count($target_id); 
    }
    if ($selected_count[$target_id] > $inventory_count[$target_id]) {
      $entities = entity_load($target_type, array($target_id));
      $item_entity = reset($entities);
      $errors[$target_field][$langcode][$delta][] = array(
        'error' => 'merci_item_conflict',
        'message' => t("You've selected too many %name's.  We only have %amount in the current inventory.", 
        array('%name' => $item_entity->title, '%amount' => $inventory_count[$target_id])),
      );
      continue;
    }
  }
}

