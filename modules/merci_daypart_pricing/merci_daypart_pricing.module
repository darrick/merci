<?php
// $Id$

/**
 * @file
 * merci_daypart_pricing functions
 */

/**
 * Implementation of hook_menu().
 */
function merci_daypart_pricing_menu() {

  $admin = array('administer MERCI');
  
  $items['merci/daypart'] = array(
    'title' => 'Daypart Pricing',
    'description' => 'Takes a node ID or content type and start and end times of the Reservation and returns price',
    'page arguments' => array(3,4,5),
    'page callback' => 'merci_daypart_pricing',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
   // Standard Administration settings.
  $items['admin/settings/merci/daypart'] = array(
    'title' => 'Daypart Pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merci_daypart_pricing_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => t('Configure settings for MERCI\'s Daypart Pricing.'),
    'type' => MENU_LOCAL_TASK,
  );


  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function merci_daypart_pricing_admin_settings() {

  $form['merci_use_lowest'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use lowest pricing'),
    '#default_value' => variable_get('merci_use_lowest', 0),
    '#description' => t('If the normal hourly pricing is lower than the Daypart pricing, use the hourly pricing.'),
            );
  
  // Hours of operation

  $hours_description = '<div>' . t('Enter military time for both starting and ending time, separated by a dash, in the format') . ' <em>hh:mm-hh:mm</em></div>' . t('ex.') . ' <em>09:00-13:00</em> ' . t('would be start at 9AM, end at `PM. Leave blank to indicate not being used.  A single 24 hour Daypart to enable 24 hour discounts would be ') . '<em>00:00-23:59</em>';
  

  $form['merci_daypart1'] = array(
    '#type' => 'textfield',
    '#title' => t('Daypart 1 hours'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('merci_daypart1', '00:00-11:59'),
    '#description' => $hours_description,
  );
  
  $form['merci_daypart2'] = array(
    '#type' => 'textfield',
    '#title' => t('Daypart 2 hours'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('merci_daypart2', '12:00-23:59'),
    '#description' => $hours_description,
  );
  
  $form['merci_daypart3'] = array(
    '#type' => 'textfield',
    '#title' => t('Daypart 3 hours'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('merci_daypart3', ''),
    '#description' => $hours_description,
  );
  
  return system_settings_form($form);
}

function merci_daypart_pricing($start, $end, $items, $response = 'json') {
  
  //print_r($items);
  
  $discount = variable_get('merci_membership_discount', 1);
  $debug = FALSE;
      
  if ($debug) {
   
    $dates[0] = 1292607900;
    $dates[1] = 1291747500;
    $items[0] = 1;
    
  } 
  
  //if we're not passing the info, check for post data
  if(!$start) {
    $items = explode(',', $_POST['items']);
    $dates = array(
      strtotime($_POST['date'][0] . ' ' . $_POST['time'][0]),
      strtotime($_POST['date'][1] . ' ' . $_POST['time'][1]),
    );
  
  }
  
  $day = strtolower(date(l,strtotime($_POST['date'][0])));
  
  
  if (variable_get('merci_' . $day . '_is_weekend', 0)) {
    $weekend_charge = TRUE;
  }
  
  watchdog('weekend charge', $weekend_charge);

  $hours = round(($dates[1] - $dates[0]) / 3600, 2);
  
  //convert to 24hr to compare
  
  if(variable_get('merci_daypart1', '0')) {
    $start = strtotime($_POST['time'][0]);
    $end = strtotime($_POST['time'][1]);
    
    $daypart1 = explode('-', variable_get('merci_daypart1', '0'));
    $daypart2 = explode('-', variable_get('merci_daypart2', '0'));
    $daypart3 = explode('-', variable_get('merci_daypart3', '0'));
    
    
    //watchdog('daypart 1 check', $start . ' >  ' . strtotime($daypart1[0]));
    //watchdog('daypart 1 check', $end . ' <  ' . strtotime($daypart1[1]));
    
    
    //START WITH THE BIGGER RANGES AND WORK DOWN TO THE SMALLEST
    //THIS LOGIC ONLY WORKS FOR SAME DAY RESERVATIONS
    
    //within daypart 1 & 2 & 3
    $daypart1_charge = TRUE;
    $daypart2_charge = TRUE;
    $daypart3_charge = TRUE;
    
    
    //within daypart 1 & 2
    if ( $start > strtotime($daypart1[0]) && $end < strtotime($daypart2[1])) {
      $daypart1_charge = TRUE;
      $daypart2_charge = TRUE;
      $daypart3_charge = FALSE;
    }
    
    //within daypart 2 & 3
    if ( $start > strtotime($daypart2[0]) && $end < strtotime($daypart3[1])) {
      $daypart1_charge = TRUE;
      $daypart2_charge = TRUE;
      $daypart3_charge = FALSE;
    }
    
    //within only daypart 1
    if ( $start > strtotime($daypart1[0]) && $end < strtotime($daypart1[1])) {
      $daypart1_charge = TRUE;
      $daypart2_charge = FALSE;
      $daypart3_charge = FALSE;
    }
    
    //within only daypart 2
    if ( $start > strtotime($daypart2[0]) && $end < strtotime($daypart2[1]) ) {
      $daypart1_charge = FALSE;
      $daypart2_charge = TRUE;
      $daypart3_charge = FALSE;
    }
    
    //within only daypart 3
    if ( $start > strtotime($daypart3[0]) && $end < strtotime($daypart3[1])) {
      $daypart1_charge = FALSE;
      $daypart2_charge = FALSE;
      $daypart3_charge = TRUE;
    }
    
    //watchdog('daypart charges', $daypart1_charge . ',' . $daypart2_charge . ',' . $daypart3_charge);
  
  }
  
  
  //watchdog('daypart hours', $hours);
  
  foreach ($items as $item) {
    //print_r($item);
    if (is_numeric($item)) {
      //this is a Resource to load the pricing based on the node
      $item_node = node_load($item);
      //print_r($item_node);
      //$type = merci_load_content_type_settings($item_node->type);
      //watchdog('daypart resource rate', $item_node->merci['rate_per_hour']);
      // watchdog('daypart 1 rate', $item_node->merci['daypart1_price']);
      // watchdog('daypart 2 rate', $item_node->merci['daypart2_price']);
      // watchdog('daypart 3 rate', $item_node->merci['daypart3_price']);
      
      //print_r($item_node);
      $fee_hours       = $hours - ($item_node->merci['fee_free_hours']);
      $rate_per_hour   = $item_node->merci['rate_per_hour']; 
      $daypart1_price  = $item_node->merci['daypart1_price'];
      $daypart2_price  = $item_node->merci['daypart2_price'];
      $daypart3_price  = $item_node->merci['daypart3_price'];
      $weekend_price   = $item_node->merci['weekend_price'];
      
    } else {
      //for buckets, load settings based on type
      //$type = merci_load_content_type_settings($item);
      $type = merci_load_item_settings(NULL,$item);
      $fee_hours       = $hours - ($type['fee_free_hours']);
      $rate_per_hour   = $type['rate_per_hour'];
      
      $daypart1_price  = $type['daypart1_price'];
      $daypart2_price  = $type['daypart2_price'];
      $daypart3_price  = $type['daypart3_price'];
      $weekend_price   = $type['weekend_price'];
    }
    
    //START FRESH
    $daypart_price = 0;
    
    watchdog('weekend price', $weekend_price);
    
    if ($weekend_charge) {
      $daypart_price = $weekend_price;
    } else {

    if ($daypart1_charge) {
      $daypart_price += $daypart1_price;
      watchdog('daypart 1 added to price', $daypart_price);
    }
    
    if ($daypart2_charge) {
      $daypart_price += $daypart2_price;
      watchdog('daypart 2 added to price', $daypart_price);
    }
    
    if ($daypart3_charge) {
      $daypart_price += $daypart3_price;
      watchdog('daypart 3 added to price', $daypart_price);
    }
    }
    
    $commercial_cost = $rate_per_hour * $hours;
    
    $day_rate        = ($rate_per_hour * 24);
    
    if(variable_get('merci_use_lowest', 0)) {
    if ($daypart_price < $commercial_cost) {
      $commercial_cost_total += $daypart1_price;
      $member_cost     = ($daypart1_price * $discount);
      $member_cost_total += $member_cost;
    } else {
      $commercial_cost_total += $commercial_cost;
      
      $member_cost     = ($fee_hours > 0) ? ($rate_per_hour * $discount) * $fee_hours : 0;
      $member_cost_total += $member_cost;
    }
    } else {
      $commercial_cost_total += $daypart_price;
      $member_cost     = ($daypart_price * $discount);
      $member_cost_total += $member_cost;  
    }
    
  }
  
  

  // create return object
  $return = new StdClass;
  $return->member = $member_cost_total;
  $return->commercial = $commercial_cost_total;
  
  if($response == 'json'){
    return drupal_json($return);
  } else {
    return $return;
  }
}
// merci_daypart_pricing

/**
 * Implements hook_form_alter().
 */
function merci_daypart_pricing_form_alter(&$form, &$form_state, $form_id) {

  if (
    ($form_id == 'merci_reservation_node_form') &&
    ($form['nid']['#value'] == NULL)
  ) {
  
    //drupal_add_js(drupal_get_path('module', 'merci_daypart_pricing') . '/js/merci_daypart_pricing.js');

  } // if

} // merci_daypart_pricing_form_alter

// hook merci_pricing_js
function merci_daypart_pricing_merci_pricing_js() {
  drupal_add_js(drupal_get_path('module', 'merci_daypart_pricing') . '/js/merci_daypart_pricing.js');
}
